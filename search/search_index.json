{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#about","title":"About","text":"<p>Phable is an open source, simple, modern Python toolkit for basic client connectivity to Project Haystack and Haxall defined server applications.</p> <p>Phable is free to use and permissively licensed under the MIT license.</p> <p>Project Haystack features include:</p> <ul> <li>Reading <code>site</code>, <code>equip</code>, and <code>point</code> entities</li> <li>Reading current values of real-time data points</li> <li>Supervisory control of real-time data points</li> <li>Reading history data for data points</li> <li>Writing history data to already established data points</li> </ul> <p>Haxall features include:</p> <ul> <li>All Project Haystack features listed above</li> <li>Add, update, and remove commit operations</li> <li>Evaluation of an Axon string expression</li> </ul> <p>Learn more about <code>Phable</code> by exploring the documentation!</p>"},{"location":"#installation","title":"Installation","text":"<p>Phable requires Python version 3.11 or higher and generally has no required software dependencies.  Download Phable from PyPI using:</p> <pre><code>$ pip install phable\n</code></pre> <p>Phable uses the <code>zoneinfo</code> module for IANA time zone support, which by default uses the system's time zone data if available.  If no system time zone data is available, then Phable requires the <code>tzdata</code> package available on PyPI to be installed.</p> <p>Phable has optional <code>pandas</code> and <code>pyarrow</code> package dependencies that are required for <code>phable.Grid.to_pandas()</code> and <code>phable.Grid.to_pandas_all()</code>.  Download Phable with <code>pandas</code> and <code>pyarrow</code> from PyPI using:</p> <pre><code>$ pip install \"phable[pandas,pyarrow]\"\n</code></pre> <p>Similarly, Phable has an optional <code>polars</code> package dependency that is required for <code>phable.Grid.to_polars()</code> and <code>phable.Grid.to_polars_all()</code>.  Download Phable with <code>polars</code> from PyPI using:</p> <pre><code>$ pip install \"phable[polars]\"\n</code></pre>"},{"location":"data_types/","title":"Data types","text":""},{"location":"data_types/#introduction","title":"Introduction","text":"<p>Project Haystack defines a fixed set of data types called kinds, which are mapped to Python objects in Phable.</p> <p>Map for singleton data types</p> Project Haystack Phable <code>Marker</code> <code>phable.Marker</code> <code>NA</code> <code>phable.NA</code> <code>Remove</code> <code>phable.Remove</code> <p>Map for scalar atomic data types</p> Project Haystack Phable <code>Bool</code> <code>bool</code> <code>Number</code> <code>phable.Number</code> <code>Str</code> <code>str</code> <code>Uri</code> <code>phable.Uri</code> <code>Ref</code> <code>phable.Ref</code> <code>Symbol</code> <code>phable.Symbol</code> <code>Date</code> <code>datetime.date</code> <code>Time</code> <code>datetime.time</code> <code>DateTime</code> <code>datetime.datetime</code> <code>Coord</code> <code>phable.Coord</code> <code>XStr</code> <code>phable.XStr</code> <p>Note: Phable's <code>datetime.datetime</code> must be timezone aware to represent Project Haystack's <code>DateTime</code>.</p> <p>Map for collection data types</p> Project Haystack Phable <code>List</code> <code>list</code> <code>Dict</code> <code>dict</code> <code>Grid</code> <code>phable.Grid</code> <p>Data Types in Phable Only</p> <p>As a convenience, Phable defines these data types, which are not defined in Project Haystack:</p> <ul> <li><code>phable.DateRange</code></li> <li><code>phable.DateTimeRange</code></li> </ul>"},{"location":"data_types/#phable.kinds.Marker","title":"Marker","text":"<p><code>Marker</code> data type defined by Project Haystack here. <code>Marker</code> is a singleton used to create \"label\" tags.</p> <p>Example:</p> <pre><code>from phable.kinds import Marker\n\nmeter_equip = {\"meter\": Marker(), \"equip\": Marker()}\n</code></pre> Source code in <code>phable/kinds.py</code> <pre><code>class Marker:\n    \"\"\"`Marker` data type defined by Project Haystack\n    [here](https://project-haystack.org/doc/docHaystack/Kinds#marker). `Marker` is a\n    singleton used to create \"label\" tags.\n\n    **Example:**\n    ```python\n    from phable.kinds import Marker\n\n    meter_equip = {\"meter\": Marker(), \"equip\": Marker()}\n    ```\n    \"\"\"\n\n    __instance = None\n\n    def __new__(cls):\n        if Marker.__instance is None:\n            Marker.__instance = object.__new__(cls)\n        return Marker.__instance\n\n    def __str__(self):\n        return \"\\u2713\"\n</code></pre>"},{"location":"data_types/#phable.kinds.NA","title":"NA","text":"<p><code>NA</code> data type defined by Project Haystack here. <code>NA</code> is a singleton to indicate a data value that is not available. In Project Haystack it is most often used in historized data to indicate a timestamp sample is in error.</p> Source code in <code>phable/kinds.py</code> <pre><code>class NA:\n    \"\"\"`NA` data type defined by Project Haystack\n    [here](https://project-haystack.org/doc/docHaystack/Kinds#na). `NA` is a\n    singleton to indicate a data value that is not available. In Project Haystack it is\n    most often used in historized data to indicate a timestamp sample is in error.\n    \"\"\"\n\n    __instance = None\n\n    def __new__(cls):\n        if NA.__instance is None:\n            NA.__instance = object.__new__(cls)\n        return NA.__instance\n\n    def __str__(self):\n        return \"NA\"\n</code></pre>"},{"location":"data_types/#phable.kinds.Remove","title":"Remove","text":"<p><code>Remove</code> data type defined by Project Haystack here. <code>Remove</code> is a singleton used in a <code>dict</code> to indicate removal of a tag.</p> Source code in <code>phable/kinds.py</code> <pre><code>class Remove:\n    \"\"\"`Remove` data type defined by Project Haystack\n    [here](https://project-haystack.org/doc/docHaystack/Kinds#remove). `Remove` is a\n    singleton used in a `dict` to indicate removal of a tag.\n    \"\"\"\n\n    __instance = None\n\n    def __new__(cls):\n        if Remove.__instance is None:\n            Remove.__instance = object.__new__(cls)\n        return Remove.__instance\n\n    def __str__(self):\n        return \"remove\"\n</code></pre>"},{"location":"data_types/#phable.kinds.Number","title":"Number  <code>dataclass</code>","text":"<p><code>Number</code> data type defined by Project Haystack here.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>float</code> <p>Floating point value.</p> required <code>unit</code> <code>str | None</code> <p>Optional unit of measurement defined in Project Haystack's standard unit database here.</p> <p>Note: Phable does not validate a defined unit at this time.</p> <code>None</code> Source code in <code>phable/kinds.py</code> <pre><code>@dataclass(frozen=True, slots=True)\nclass Number:\n    \"\"\"`Number` data type defined by Project Haystack\n    [here](https://project-haystack.org/doc/docHaystack/Kinds#number).\n\n    Parameters:\n        val: Floating point value.\n        unit:\n            Optional unit of measurement defined in Project Haystack's standard unit\n            database [here](https://project-haystack.org/doc/docHaystack/Units).\n\n            **Note**: Phable does not validate a defined unit at this time.\n    \"\"\"\n\n    val: float\n    unit: str | None = None\n\n    def __str__(self):\n        if self.unit is not None:\n            return f\"{self.val}{self.unit}\"\n        else:\n            return f\"{self.val}\"\n</code></pre>"},{"location":"data_types/#phable.kinds.Uri","title":"Uri  <code>dataclass</code>","text":"<p><code>Uri</code> data type defined by Project Haystack here.</p> <p>Example:</p> <pre><code>from phable.kinds import Uri\n\nuri = Uri(\"http://project-haystack.org/\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>str</code> <p>Universal Resource Identifier according to RFC 3986.</p> required Source code in <code>phable/kinds.py</code> <pre><code>@dataclass(frozen=True, slots=True)\nclass Uri:\n    \"\"\"`Uri` data type defined by Project Haystack\n    [here](https://project-haystack.org/doc/docHaystack/Kinds#uri).\n\n    **Example:**\n    ```python\n    from phable.kinds import Uri\n\n    uri = Uri(\"http://project-haystack.org/\")\n    ```\n\n    Parameters:\n        val:\n            Universal Resource Identifier according to\n            [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986).\n    \"\"\"\n\n    val: str\n\n    def __str__(self):\n        return self.val\n</code></pre>"},{"location":"data_types/#phable.kinds.Ref","title":"Ref  <code>dataclass</code>","text":"<p><code>Ref</code> data type defined by Project Haystack here.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>str</code> <p>Unique identifier for an entity.</p> required <code>dis</code> <code>str | None</code> <p>Optional human display name.</p> <code>None</code> Source code in <code>phable/kinds.py</code> <pre><code>@dataclass(frozen=True, slots=True)\nclass Ref:\n    \"\"\"`Ref` data type defined by Project Haystack\n    [here](https://project-haystack.org/doc/docHaystack/Kinds#ref).\n\n    Parameters:\n        val: Unique identifier for an entity.\n        dis: Optional human display name.\n    \"\"\"\n\n    val: str\n    dis: str | None = None\n\n    def __str__(self) -&gt; str:\n        if self.dis is not None:\n            return self.dis\n        else:\n            return f\"@{self.val}\"\n</code></pre>"},{"location":"data_types/#phable.kinds.Symbol","title":"Symbol  <code>dataclass</code>","text":"<p><code>Symbol</code> data type defined by Project Haystack here.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>str</code> <p>def identifier. Consists of only ASCII letters, digits, underbar, colon, dash, period, or tilde.</p> required Source code in <code>phable/kinds.py</code> <pre><code>@dataclass(frozen=True, slots=True)\nclass Symbol:\n    \"\"\"`Symbol` data type defined by Project Haystack\n    [here](https://project-haystack.org/doc/docHaystack/Kinds#symbol).\n\n    Parameters:\n        val:\n            [def](https://project-haystack.org/doc/docHaystack/Defs) identifier.\n            Consists of only ASCII letters, digits, underbar, colon, dash, period, or\n            tilde.\n    \"\"\"\n\n    val: str\n\n    def __str__(self):\n        return f\"^{self.val}\"\n</code></pre>"},{"location":"data_types/#phable.kinds.Coord","title":"Coord  <code>dataclass</code>","text":"<p><code>Coord</code> data type defined by Project Haystack here.</p> <p>Parameters:</p> Name Type Description Default <code>lat</code> <code>decimal.Decimal</code> <p>Latitude represented in decimal degrees.</p> required <code>lng</code> <code>decimal.Decimal</code> <p>Longitude represented in decimal degrees.</p> required Source code in <code>phable/kinds.py</code> <pre><code>@dataclass(frozen=True, slots=True)\nclass Coord:\n    \"\"\"`Coord` data type defined by Project Haystack\n    [here](https://project-haystack.org/doc/docHaystack/Kinds#coord).\n\n    Parameters:\n        lat:\n            Latitude represented in\n            [decimal degrees](https://en.wikipedia.org/wiki/Decimal_degrees).\n        lng:\n            Longitude represented in\n            [decimal degrees](https://en.wikipedia.org/wiki/Decimal_degrees).\n    \"\"\"\n\n    lat: Decimal\n    lng: Decimal\n\n    def __str__(self):\n        getcontext().prec = 6\n        return f\"C({self.lat}, {self.lng})\"\n</code></pre>"},{"location":"data_types/#phable.kinds.XStr","title":"XStr  <code>dataclass</code>","text":"<p><code>XStr</code> data type defined by Project Haystack here.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str</code> <p>Type name that follows Project Haystack's tag naming rules, except it must start with an ASCII uppercase letter (A-Z).</p> required <code>val</code> <code>str</code> <p>String encoded value.</p> required Source code in <code>phable/kinds.py</code> <pre><code>@dataclass(frozen=True, slots=True)\nclass XStr:\n    \"\"\"`XStr` data type defined by Project Haystack\n    [here](https://project-haystack.org/doc/docHaystack/Kinds#xstr).\n\n    Parameters:\n        type:\n            Type name that follows Project Haystack's\n            [tag naming](https://project-haystack.org/doc/docHaystack/Kinds#names)\n            rules, except it must start with an ASCII uppercase letter (A-Z).\n        val: String encoded value.\n    \"\"\"\n\n    type: str\n    val: str\n\n    def __str__(self):\n        return f\"({self.type}, {self.val})\"\n</code></pre>"},{"location":"data_types/#phable.kinds.Grid","title":"Grid  <code>dataclass</code>","text":"<p><code>Grid</code> data type defined by Project Haystack here.</p> <p>Parameters:</p> Name Type Description Default <code>meta</code> <code>dict[str, typing.Any]</code> <p>Metadata for the entire <code>Grid</code>.</p> required <code>cols</code> <code>list[dict[str, typing.Any]]</code> <p>Metadata for columns within the <code>Grid</code>.</p> required <code>rows</code> <code>list[dict[str, typing.Any]]</code> <p>Row data for <code>Grid</code>.</p> required Source code in <code>phable/kinds.py</code> <pre><code>@dataclass(frozen=True, slots=True)\nclass Grid:\n    \"\"\"`Grid` data type defined by Project Haystack\n    [here](https://project-haystack.org/doc/docHaystack/Kinds#grid).\n\n    Parameters:\n        meta: Metadata for the entire `Grid`.\n        cols: Metadata for columns within the `Grid`.\n        rows: Row data for `Grid`.\n    \"\"\"\n\n    meta: dict[str, Any]\n    cols: list[dict[str, Any]]\n    rows: list[dict[str, Any]]\n\n    def __str__(self):\n        return \"Haystack Grid\"\n\n    @staticmethod\n    def to_grid(\n        rows: dict[str, Any] | list[dict[str, Any]],\n        meta: dict[str, Any] | None = None,\n    ) -&gt; Grid:\n        \"\"\"Creates a `Grid` using row data and optional metadata.\n\n        If parameters include history data, assumes the history rows are in\n        chronological order to establish `hisStart` and `hisEnd` in `meta`.\n\n        Parameters:\n            rows: Row data for `Grid`.\n            meta: Optional metadata for the entire `Grid`.\n        \"\"\"\n        if isinstance(rows, dict):\n            rows = [rows]\n\n        # might be able to find a nicer way to do this\n        col_names: list[str] = []\n        for row in rows:\n            for col_name in row.keys():\n                if col_name not in col_names:\n                    col_names.append(col_name)\n\n        cols = [{\"name\": name} for name in col_names]\n\n        grid_meta = {\"ver\": \"3.0\"}\n\n        if meta is not None:\n            grid_meta = grid_meta | meta\n\n        his_start = rows[0].get(\"ts\", None)\n        his_end = rows[-1].get(\"ts\", None)\n\n        if his_start is not None and his_end is not None:\n            grid_meta[\"hisStart\"] = his_start\n            grid_meta[\"hisEnd\"] = his_end + timedelta(minutes=1)\n\n        return Grid(meta=grid_meta, cols=cols, rows=rows)\n\n    def get_df_meta(\n        self,\n    ) -&gt; dict[str, dict[str, Any] | list[dict[str, Any]]]:\n        \"\"\"Gets metadata for a DataFrame describing data from a `Grid`.\n\n        In the returned dictionary:\n\n         - Value for `meta` key is data used in Grid's `meta` attribute.\n         - Value for `cols` key is data used in Grid's `cols` attribute.\n\n        Returns:\n            Dictionary with keys `meta` and `cols`.\n        \"\"\"\n\n        df_meta = {}\n        df_meta[\"meta\"] = self.meta.copy()\n        df_meta[\"cols\"] = self.cols.copy()\n        return df_meta\n\n    def to_pandas(self):\n        \"\"\"Converts rows in the `Grid` to a Pandas DataFrame.\n\n        Requires Phable's optional Pandas dependency to be installed.\n\n        For Grids with rows that do not have history data, Phable defined data types\n        are passed as the `data` input to the DataFrame.\n\n        For Grids with rows that have history data, an opinionated mashing process is\n        applied to data passed to the DataFrame's `data` input:\n\n         - Phable's `NA` objects are converted to `None`\n         - Missing column values are converted to `None`\n         - `Number` objects are converted to unitless `float` values\n\n        The resultant Pandas DataFrame's data types are converted to the `pyarrow` data\n        format.\n\n        **Notes:**\n\n         - This method is experimental and subject to change.\n         - This method assumes all `Number` objects in a given column has the same unit.\n\n        **Example:**\n\n        ```python\n        from datetime import datetime, timedelta\n\n        from phable import Grid, Number\n\n        ts_now = datetime.now()\n        data = [\n            {\"ts\": ts_now - timedelta(minutes=30), \"val\": Number(30, \"kW\")},\n            {\"ts\": ts_now, \"val\": Number(38, \"kW\")},\n        ]\n        data = Grid.to_grid(data)\n        df = data.to_pandas()\n        ```\n        \"\"\"\n        import pandas as pd\n\n        data = _get_data_for_df(self)\n        df = pd.DataFrame(data=data).convert_dtypes(dtype_backend=\"pyarrow\")\n\n        return df\n\n    def to_pandas_all(self):\n        \"\"\"Returns a tuple:  `(Grid.get_df_meta(), Grid.to_pandas())`\n\n        **Example:**\n\n        ```python\n        from datetime import datetime, timedelta\n\n        from phable import Grid, Number\n\n        ts_now = datetime.now()\n        data = [\n            {\"ts\": ts_now - timedelta(minutes=30), \"val\": Number(30, \"kW\")},\n            {\"ts\": ts_now, \"val\": Number(38, \"kW\")},\n        ]\n        data = Grid.to_grid(data)\n        df_meta, df = data.to_pandas_all()\n        ```\n        \"\"\"\n        return self.get_df_meta(), self.to_pandas()\n\n    def to_polars(self):\n        \"\"\"Converts rows in the `Grid` to a Polars DataFrame.\n\n        Requires Phable's optional Polars dependency to be installed.\n\n        For Grids with rows that do not have history data, Phable defined data types\n        are passed as the `data` input to the DataFrame.\n\n        For Grids with rows that have history data, an opinionated mashing process is\n        applied to data passed to the DataFrame's `data` input:\n\n         - Phable's `NA` objects are converted to `None`\n         - Missing column values are converted to `None`\n         - `Number` objects are converted to unitless `float` values\n\n        **Notes:**\n\n         - This method is experimental and subject to change.\n         - This method assumes all `Number` objects in a given column has the same unit.\n\n        **Example:**\n\n        ```python\n        from datetime import datetime, timedelta\n\n        from phable import Grid, Number\n\n        ts_now = datetime.now()\n        data = [\n            {\"ts\": ts_now - timedelta(minutes=30), \"val\": Number(30, \"kW\")},\n            {\"ts\": ts_now, \"val\": Number(38, \"kW\")},\n        ]\n        data = Grid.to_grid(data)\n        df = data.to_polars()\n        ```\n        \"\"\"\n\n        import polars as pl\n\n        data = _get_data_for_df(self)\n        df = pl.DataFrame(data=data)\n\n        return df\n\n    def to_polars_all(self):\n        \"\"\"Returns a tuple:  `(Grid.get_df_meta(), Grid.to_polars())`\n\n        **Example:**\n\n        ```python\n        from datetime import datetime, timedelta\n\n        from phable import Grid, Number\n\n        ts_now = datetime.now()\n        data = [\n            {\"ts\": ts_now - timedelta(minutes=30), \"val\": Number(30, \"kW\")},\n            {\"ts\": ts_now, \"val\": Number(38, \"kW\")},\n        ]\n        data = Grid.to_grid(data)\n        df_meta, df = data.to_polars_all()\n        ```\n        \"\"\"\n        return self.get_df_meta(), self.to_polars()\n</code></pre>"},{"location":"data_types/#phable.kinds.Grid.get_df_meta","title":"get_df_meta","text":"<pre><code>get_df_meta()\n</code></pre> <p>Gets metadata for a DataFrame describing data from a <code>Grid</code>.</p> <p>In the returned dictionary:</p> <ul> <li>Value for <code>meta</code> key is data used in Grid's <code>meta</code> attribute.</li> <li>Value for <code>cols</code> key is data used in Grid's <code>cols</code> attribute.</li> </ul> <p>Returns:</p> Type Description <code>dict[str, dict[str, typing.Any] | list[dict[str, typing.Any]]]</code> <p>Dictionary with keys <code>meta</code> and <code>cols</code>.</p> Source code in <code>phable/kinds.py</code> <pre><code>def get_df_meta(\n    self,\n) -&gt; dict[str, dict[str, Any] | list[dict[str, Any]]]:\n    \"\"\"Gets metadata for a DataFrame describing data from a `Grid`.\n\n    In the returned dictionary:\n\n     - Value for `meta` key is data used in Grid's `meta` attribute.\n     - Value for `cols` key is data used in Grid's `cols` attribute.\n\n    Returns:\n        Dictionary with keys `meta` and `cols`.\n    \"\"\"\n\n    df_meta = {}\n    df_meta[\"meta\"] = self.meta.copy()\n    df_meta[\"cols\"] = self.cols.copy()\n    return df_meta\n</code></pre>"},{"location":"data_types/#phable.kinds.Grid.to_grid","title":"to_grid  <code>staticmethod</code>","text":"<pre><code>to_grid(rows, meta=None)\n</code></pre> <p>Creates a <code>Grid</code> using row data and optional metadata.</p> <p>If parameters include history data, assumes the history rows are in chronological order to establish <code>hisStart</code> and <code>hisEnd</code> in <code>meta</code>.</p> <p>Parameters:</p> Name Type Description Default <code>rows</code> <code>dict[str, typing.Any] | list[dict[str, typing.Any]]</code> <p>Row data for <code>Grid</code>.</p> required <code>meta</code> <code>dict[str, typing.Any] | None</code> <p>Optional metadata for the entire <code>Grid</code>.</p> <code>None</code> Source code in <code>phable/kinds.py</code> <pre><code>@staticmethod\ndef to_grid(\n    rows: dict[str, Any] | list[dict[str, Any]],\n    meta: dict[str, Any] | None = None,\n) -&gt; Grid:\n    \"\"\"Creates a `Grid` using row data and optional metadata.\n\n    If parameters include history data, assumes the history rows are in\n    chronological order to establish `hisStart` and `hisEnd` in `meta`.\n\n    Parameters:\n        rows: Row data for `Grid`.\n        meta: Optional metadata for the entire `Grid`.\n    \"\"\"\n    if isinstance(rows, dict):\n        rows = [rows]\n\n    # might be able to find a nicer way to do this\n    col_names: list[str] = []\n    for row in rows:\n        for col_name in row.keys():\n            if col_name not in col_names:\n                col_names.append(col_name)\n\n    cols = [{\"name\": name} for name in col_names]\n\n    grid_meta = {\"ver\": \"3.0\"}\n\n    if meta is not None:\n        grid_meta = grid_meta | meta\n\n    his_start = rows[0].get(\"ts\", None)\n    his_end = rows[-1].get(\"ts\", None)\n\n    if his_start is not None and his_end is not None:\n        grid_meta[\"hisStart\"] = his_start\n        grid_meta[\"hisEnd\"] = his_end + timedelta(minutes=1)\n\n    return Grid(meta=grid_meta, cols=cols, rows=rows)\n</code></pre>"},{"location":"data_types/#phable.kinds.Grid.to_pandas","title":"to_pandas","text":"<pre><code>to_pandas()\n</code></pre> <p>Converts rows in the <code>Grid</code> to a Pandas DataFrame.</p> <p>Requires Phable's optional Pandas dependency to be installed.</p> <p>For Grids with rows that do not have history data, Phable defined data types are passed as the <code>data</code> input to the DataFrame.</p> <p>For Grids with rows that have history data, an opinionated mashing process is applied to data passed to the DataFrame's <code>data</code> input:</p> <ul> <li>Phable's <code>NA</code> objects are converted to <code>None</code></li> <li>Missing column values are converted to <code>None</code></li> <li><code>Number</code> objects are converted to unitless <code>float</code> values</li> </ul> <p>The resultant Pandas DataFrame's data types are converted to the <code>pyarrow</code> data format.</p> <p>Notes:</p> <ul> <li>This method is experimental and subject to change.</li> <li>This method assumes all <code>Number</code> objects in a given column has the same unit.</li> </ul> <p>Example:</p> <pre><code>from datetime import datetime, timedelta\n\nfrom phable import Grid, Number\n\nts_now = datetime.now()\ndata = [\n    {\"ts\": ts_now - timedelta(minutes=30), \"val\": Number(30, \"kW\")},\n    {\"ts\": ts_now, \"val\": Number(38, \"kW\")},\n]\ndata = Grid.to_grid(data)\ndf = data.to_pandas()\n</code></pre> Source code in <code>phable/kinds.py</code> <pre><code>def to_pandas(self):\n    \"\"\"Converts rows in the `Grid` to a Pandas DataFrame.\n\n    Requires Phable's optional Pandas dependency to be installed.\n\n    For Grids with rows that do not have history data, Phable defined data types\n    are passed as the `data` input to the DataFrame.\n\n    For Grids with rows that have history data, an opinionated mashing process is\n    applied to data passed to the DataFrame's `data` input:\n\n     - Phable's `NA` objects are converted to `None`\n     - Missing column values are converted to `None`\n     - `Number` objects are converted to unitless `float` values\n\n    The resultant Pandas DataFrame's data types are converted to the `pyarrow` data\n    format.\n\n    **Notes:**\n\n     - This method is experimental and subject to change.\n     - This method assumes all `Number` objects in a given column has the same unit.\n\n    **Example:**\n\n    ```python\n    from datetime import datetime, timedelta\n\n    from phable import Grid, Number\n\n    ts_now = datetime.now()\n    data = [\n        {\"ts\": ts_now - timedelta(minutes=30), \"val\": Number(30, \"kW\")},\n        {\"ts\": ts_now, \"val\": Number(38, \"kW\")},\n    ]\n    data = Grid.to_grid(data)\n    df = data.to_pandas()\n    ```\n    \"\"\"\n    import pandas as pd\n\n    data = _get_data_for_df(self)\n    df = pd.DataFrame(data=data).convert_dtypes(dtype_backend=\"pyarrow\")\n\n    return df\n</code></pre>"},{"location":"data_types/#phable.kinds.Grid.to_pandas_all","title":"to_pandas_all","text":"<pre><code>to_pandas_all()\n</code></pre> <p>Returns a tuple:  <code>(Grid.get_df_meta(), Grid.to_pandas())</code></p> <p>Example:</p> <pre><code>from datetime import datetime, timedelta\n\nfrom phable import Grid, Number\n\nts_now = datetime.now()\ndata = [\n    {\"ts\": ts_now - timedelta(minutes=30), \"val\": Number(30, \"kW\")},\n    {\"ts\": ts_now, \"val\": Number(38, \"kW\")},\n]\ndata = Grid.to_grid(data)\ndf_meta, df = data.to_pandas_all()\n</code></pre> Source code in <code>phable/kinds.py</code> <pre><code>def to_pandas_all(self):\n    \"\"\"Returns a tuple:  `(Grid.get_df_meta(), Grid.to_pandas())`\n\n    **Example:**\n\n    ```python\n    from datetime import datetime, timedelta\n\n    from phable import Grid, Number\n\n    ts_now = datetime.now()\n    data = [\n        {\"ts\": ts_now - timedelta(minutes=30), \"val\": Number(30, \"kW\")},\n        {\"ts\": ts_now, \"val\": Number(38, \"kW\")},\n    ]\n    data = Grid.to_grid(data)\n    df_meta, df = data.to_pandas_all()\n    ```\n    \"\"\"\n    return self.get_df_meta(), self.to_pandas()\n</code></pre>"},{"location":"data_types/#phable.kinds.Grid.to_polars","title":"to_polars","text":"<pre><code>to_polars()\n</code></pre> <p>Converts rows in the <code>Grid</code> to a Polars DataFrame.</p> <p>Requires Phable's optional Polars dependency to be installed.</p> <p>For Grids with rows that do not have history data, Phable defined data types are passed as the <code>data</code> input to the DataFrame.</p> <p>For Grids with rows that have history data, an opinionated mashing process is applied to data passed to the DataFrame's <code>data</code> input:</p> <ul> <li>Phable's <code>NA</code> objects are converted to <code>None</code></li> <li>Missing column values are converted to <code>None</code></li> <li><code>Number</code> objects are converted to unitless <code>float</code> values</li> </ul> <p>Notes:</p> <ul> <li>This method is experimental and subject to change.</li> <li>This method assumes all <code>Number</code> objects in a given column has the same unit.</li> </ul> <p>Example:</p> <pre><code>from datetime import datetime, timedelta\n\nfrom phable import Grid, Number\n\nts_now = datetime.now()\ndata = [\n    {\"ts\": ts_now - timedelta(minutes=30), \"val\": Number(30, \"kW\")},\n    {\"ts\": ts_now, \"val\": Number(38, \"kW\")},\n]\ndata = Grid.to_grid(data)\ndf = data.to_polars()\n</code></pre> Source code in <code>phable/kinds.py</code> <pre><code>def to_polars(self):\n    \"\"\"Converts rows in the `Grid` to a Polars DataFrame.\n\n    Requires Phable's optional Polars dependency to be installed.\n\n    For Grids with rows that do not have history data, Phable defined data types\n    are passed as the `data` input to the DataFrame.\n\n    For Grids with rows that have history data, an opinionated mashing process is\n    applied to data passed to the DataFrame's `data` input:\n\n     - Phable's `NA` objects are converted to `None`\n     - Missing column values are converted to `None`\n     - `Number` objects are converted to unitless `float` values\n\n    **Notes:**\n\n     - This method is experimental and subject to change.\n     - This method assumes all `Number` objects in a given column has the same unit.\n\n    **Example:**\n\n    ```python\n    from datetime import datetime, timedelta\n\n    from phable import Grid, Number\n\n    ts_now = datetime.now()\n    data = [\n        {\"ts\": ts_now - timedelta(minutes=30), \"val\": Number(30, \"kW\")},\n        {\"ts\": ts_now, \"val\": Number(38, \"kW\")},\n    ]\n    data = Grid.to_grid(data)\n    df = data.to_polars()\n    ```\n    \"\"\"\n\n    import polars as pl\n\n    data = _get_data_for_df(self)\n    df = pl.DataFrame(data=data)\n\n    return df\n</code></pre>"},{"location":"data_types/#phable.kinds.Grid.to_polars_all","title":"to_polars_all","text":"<pre><code>to_polars_all()\n</code></pre> <p>Returns a tuple:  <code>(Grid.get_df_meta(), Grid.to_polars())</code></p> <p>Example:</p> <pre><code>from datetime import datetime, timedelta\n\nfrom phable import Grid, Number\n\nts_now = datetime.now()\ndata = [\n    {\"ts\": ts_now - timedelta(minutes=30), \"val\": Number(30, \"kW\")},\n    {\"ts\": ts_now, \"val\": Number(38, \"kW\")},\n]\ndata = Grid.to_grid(data)\ndf_meta, df = data.to_polars_all()\n</code></pre> Source code in <code>phable/kinds.py</code> <pre><code>def to_polars_all(self):\n    \"\"\"Returns a tuple:  `(Grid.get_df_meta(), Grid.to_polars())`\n\n    **Example:**\n\n    ```python\n    from datetime import datetime, timedelta\n\n    from phable import Grid, Number\n\n    ts_now = datetime.now()\n    data = [\n        {\"ts\": ts_now - timedelta(minutes=30), \"val\": Number(30, \"kW\")},\n        {\"ts\": ts_now, \"val\": Number(38, \"kW\")},\n    ]\n    data = Grid.to_grid(data)\n    df_meta, df = data.to_polars_all()\n    ```\n    \"\"\"\n    return self.get_df_meta(), self.to_polars()\n</code></pre>"},{"location":"data_types/#phable.kinds.DateRange","title":"DateRange  <code>dataclass</code>","text":"<p><code>DateRange</code> data type, defined by <code>Phable</code>, describes a time range using dates.</p> <p>Note: Project Haystack does not define a kind for <code>DateRange</code>.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>datetime.date</code> <p>Midnight of the start date (inclusive) for the range.</p> required <code>end</code> <code>datetime.date</code> <p>Midnight of the end date (exclusive) for the range.</p> required Source code in <code>phable/kinds.py</code> <pre><code>@dataclass(frozen=True, slots=True)\nclass DateRange:\n    \"\"\"`DateRange` data type, defined by `Phable`, describes a time range using dates.\n\n    **Note:** Project Haystack does not define a kind for `DateRange`.\n\n    Parameters:\n        start: Midnight of the start date (inclusive) for the range.\n        end: Midnight of the end date (exclusive) for the range.\n    \"\"\"\n\n    start: date\n    end: date\n\n    def __str__(self):\n        return self.start.isoformat() + \",\" + self.end.isoformat()\n</code></pre>"},{"location":"data_types/#phable.kinds.DateTimeRange","title":"DateTimeRange  <code>dataclass</code>","text":"<p><code>DateTimeRange</code> data type, defined by <code>Phable</code>, describes a time range using date, time, and timezone information.</p> <p><code>datetime</code> objects used for <code>start</code> and <code>end</code> must be timezone aware using <code>ZoneInfo</code> as a concrete implementation of the <code>datetime.tzinfo</code> abstract base class.</p> <p>Example:</p> <pre><code>from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nfrom phable.kinds import DateTimeRange\n\ntzinfo = ZoneInfo(\"America/New_York\")\nstart = datetime(2024, 11, 22, 8, 19, 0, tzinfo=tzinfo)\nend = datetime(2024, 11, 22, 9, 19, 0, tzinfo=tzinfo)\n\nrange_with_end = DateTimeRange(start, end)\nrange_without_end = DateTimeRange(start)\n</code></pre> <p>Note: Project Haystack does not define a kind for <code>DateTimeRange</code>.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>datetime.datetime</code> <p>Start timestamp (inclusive) which is timezone aware using <code>ZoneInfo</code>.</p> required <code>end</code> <code>datetime.datetime | None</code> <p>Optional end timestamp (exclusive) which is timezone aware using <code>ZoneInfo</code>. If end is undefined, then assume end to be when the last data value was recorded.</p> <code>None</code> Source code in <code>phable/kinds.py</code> <pre><code>@dataclass(frozen=True, slots=True)\nclass DateTimeRange:\n    \"\"\"`DateTimeRange` data type, defined by `Phable`, describes a time range using\n    date, time, and timezone information.\n\n    `datetime` objects used for `start` and `end` must be timezone aware using\n    `ZoneInfo` as a concrete implementation of the `datetime.tzinfo` abstract base\n    class.\n\n    **Example:**\n\n    ```python\n    from datetime import datetime\n    from zoneinfo import ZoneInfo\n\n    from phable.kinds import DateTimeRange\n\n    tzinfo = ZoneInfo(\"America/New_York\")\n    start = datetime(2024, 11, 22, 8, 19, 0, tzinfo=tzinfo)\n    end = datetime(2024, 11, 22, 9, 19, 0, tzinfo=tzinfo)\n\n    range_with_end = DateTimeRange(start, end)\n    range_without_end = DateTimeRange(start)\n    ```\n\n    **Note:** Project Haystack does not define a kind for `DateTimeRange`.\n\n    Parameters:\n        start: Start timestamp (inclusive) which is timezone aware using `ZoneInfo`.\n        end:\n            Optional end timestamp (exclusive) which is timezone aware using\n            `ZoneInfo`. If end is undefined, then assume end to be when the last data\n            value was recorded.\n    \"\"\"\n\n    start: datetime\n    end: datetime | None = None\n\n    def __str__(self):\n        if self.end is None:\n            return _to_haystack_datetime(self.start)\n        else:\n            return (\n                _to_haystack_datetime(self.start)\n                + \",\"\n                + _to_haystack_datetime(self.end)\n            )\n\n    def __post_init__(self):\n        start_ok = isinstance(self.start.tzinfo, ZoneInfo)\n        end_ok = self.end is None\n\n        if isinstance(self.end, datetime):\n            end_ok = isinstance(self.end.tzinfo, ZoneInfo)\n\n        if start_ok is False or end_ok is False:\n            raise ValueError\n</code></pre>"},{"location":"haxall_client/","title":"<code>HaxallClient</code>","text":""},{"location":"haxall_client/#phable.haxall_client.open_haxall_client","title":"open_haxall_client","text":"<pre><code>open_haxall_client(uri, username, password, *, content_type='json', ssl_context=None)\n</code></pre> <p>Context manager for opening and closing a session with a Haxall application. May help prevent accidentially leaving a session with the server open.</p> <p><code>open_haxall_client</code> can be directly imported as follows:</p> <pre><code>from phable import open_haxall_client\n</code></pre> <p>Example:</p> <pre><code>from phable import open_haxall_client\n\nuri = \"http://localhost:8080/api/demo\"\nwith open_haxall_client(uri, \"su\", \"password\") as client:\n    print(client.about())\n</code></pre> <p>Note: This context manager uses Project Haystack's close op, which was later introduced. Therefore the context manager may not work with earlier versions of Haxall.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>URI of endpoint such as \"http://host/api/myProj/\".</p> required <code>username</code> <code>str</code> <p>Username for the API user.</p> required <code>password</code> <code>str</code> <p>Password for the API user.</p> required <code>content_type</code> <code>str</code> <p>Format of data exchanged via HTTP. \"json\" and \"zinc\" options are supported.</p> <code>'json'</code> <code>ssl_context</code> <code>ssl.SSLContext | None</code> <p>Optional SSL context. If not provided, a SSL context with default settings is created and used.</p> <code>None</code> Source code in <code>phable/haxall_client.py</code> <pre><code>@contextmanager\ndef open_haxall_client(\n    uri: str,\n    username: str,\n    password: str,\n    *,\n    content_type: str = \"json\",\n    ssl_context: SSLContext | None = None,\n) -&gt; Generator[HaxallClient, None, None]:\n    \"\"\"Context manager for opening and closing a session with a\n    [Haxall](https://haxall.io/) application. May help prevent accidentially leaving a\n    session with the server open.\n\n    `open_haxall_client` can be directly imported as follows:\n\n    ```python\n    from phable import open_haxall_client\n    ```\n\n    **Example:**\n\n    ```python\n    from phable import open_haxall_client\n\n    uri = \"http://localhost:8080/api/demo\"\n    with open_haxall_client(uri, \"su\", \"password\") as client:\n        print(client.about())\n    ```\n\n    **Note:** This context manager uses Project Haystack's\n    [close op](https://project-haystack.org/doc/docHaystack/Ops#close), which was\n    later introduced. Therefore the context manager may not work with earlier versions\n    of Haxall.\n\n    Parameters:\n        uri: URI of endpoint such as \"http://host/api/myProj/\".\n        username: Username for the API user.\n        password: Password for the API user.\n        content_type:\n            Format of data exchanged via HTTP. \"json\" and \"zinc\" options are supported.\n        ssl_context:\n            Optional SSL context. If not provided, a SSL context with default\n            settings is created and used.\n    \"\"\"\n\n    client = HaxallClient.open(\n        uri, username, password, content_type=content_type, ssl_context=ssl_context\n    )\n    yield client\n    client.close()\n</code></pre>"},{"location":"haxall_client/#phable.haxall_client.HaxallClient","title":"HaxallClient","text":"<p>               Bases: <code>phable.haystack_client.HaystackClient</code></p> <p>A superset of <code>HaystackClient</code> with support for Haxall specific operations.</p> <p>Learn more about Haxall here.</p> Source code in <code>phable/haxall_client.py</code> <pre><code>class HaxallClient(HaystackClient):\n    \"\"\"A superset of `HaystackClient` with support for Haxall specific operations.\n\n    Learn more about Haxall [here](https://haxall.io/).\n    \"\"\"\n\n    def commit_add(self, recs: dict[str, Any] | list[dict[str, Any]] | Grid) -&gt; Grid:\n        \"\"\"Adds one or more new records to the database.\n\n        As a general rule you should not have an `id` column in your commit grid.\n        However if you wish to predefine the id of the records, you can specify an `id`\n        column in the commit grid.\n\n        Commit access requires the API user to have admin permission.\n\n        **Errors**\n\n        After the request `Grid` is successfully read by the server, the server\n        may respond with a `Grid` that triggers one of the following errors to be\n        raised:\n\n        1. `ErrorGridError` if the operation fails\n        2. `IncompleteDataError` if incomplete data is being returned\n\n        **Additional info**\n\n        See Haxall's Commit operation docs for more details\n        [here](https://haxall.io/doc/lib-hx/op~commit).\n\n        **Example:**\n\n        ```python\n        from phable import Marker, open_haxall_client\n\n        # define these settings specific to your use case\n        uri = \"http://localhost:8080/api/demo\"\n        username = \"&lt;username&gt;\"\n        password = \"&lt;password&gt;\"\n\n        # define the rec to add\n        rec = [{\"dis\": \"TestRec\", \"testing\": Marker(), \"pytest\": Marker()}]\n\n        with open_haxall_client(uri, username, password) as client:\n            # commit the rec and capture response\n            rec_added_grid = client.commit_add(rec)\n        ```\n\n        Parameters:\n            recs: Records to be added to the database.\n\n        Returns:\n            The full tag definitions for each of the newly added records.\n        \"\"\"\n        meta = {\"commit\": \"add\"}\n        if isinstance(recs, Grid):\n            meta = recs.meta | meta\n            recs = recs.rows\n        return self.call(\"commit\", Grid.to_grid(recs, meta))\n\n    def commit_update(self, recs: dict[str, Any] | list[dict[str, Any]] | Grid) -&gt; Grid:\n        \"\"\"Updates one or more existing records within the database.\n\n        Commit access requires the API user to have admin permission.\n\n        **Errors**\n\n        After the request `Grid` is successfully read by the server, the server\n        may respond with a `Grid` that triggers one of the following errors to be\n        raised:\n\n        1. `ErrorGridError` if the operation fails\n        2. `IncompleteDataError` if incomplete data is being returned\n\n        **Additional info**\n\n        See Haxall's Commit operation docs for more details\n        [here](https://haxall.io/doc/lib-hx/op~commit).\n\n        **Example:**\n\n        ```python\n        from phable import Ref, open_haxall_client\n\n        # define these settings specific to your use case\n        uri = \"http://localhost:8080/api/demo\"\n        username = \"&lt;username&gt;\"\n        password = \"&lt;password&gt;\"\n\n        with open_haxall_client(uri, username, password) as client:\n            # query entire rec we want to modify to get the mod tag\n            rec = client.read_by_id(Ref(\"2e9ab42e-c9822ff9\"))\n\n            # define new tag to add to rec\n            rec[\"foo\"] = \"new tag\"\n\n            # commit update to rec and capture response\n            rec_modified_grid = client.commit_update(rec)\n        ```\n\n        Parameters:\n            recs:\n                Existing records within the database to be updated. Each record (or\n                row) must at minimum have tags for the rec's existing `id` and `mod`\n                columns (defined by the server) and the columns being updated (defined\n                by the client).\n\n        Returns:\n            The latest full tag definitions for each of the updated records.\n        \"\"\"\n        meta = {\"commit\": \"update\"}\n        if isinstance(recs, Grid):\n            meta = recs.meta | meta\n            recs = recs.rows\n        return self.call(\"commit\", Grid.to_grid(recs, meta))\n\n    def commit_remove(self, recs: dict[str, Any] | list[dict[str, Any]] | Grid) -&gt; Grid:\n        \"\"\"Removes one or more records from the database.\n\n        Commit access requires the API user to have admin permission.\n\n        **Errors**\n\n        An `ErrorGridError` is raised if any of the recs do not exist on\n        the server.\n\n        Also, after the request `Grid` is successfully read by the server, the server\n        may respond with a `Grid` that triggers one of the following errors to be\n        raised:\n\n        1. `ErrorGridError` if the operation fails\n        2. `IncompleteDataError` if incomplete data is being returned\n\n        **Additional info**\n\n        See Haxall's Commit operation docs for more details\n        [here](https://haxall.io/doc/lib-hx/op~commit).\n\n        **Example:**\n\n        ```python\n        from phable import Ref, open_haxall_client\n\n        # define these settings specific to your use case\n        uri = \"http://localhost:8080/api/demo\"\n        username = \"&lt;username&gt;\"\n        password = \"&lt;password&gt;\"\n\n        with open_haxall_client(uri, username, password) as client:\n            # query entire rec you want to delete to get the mod tag\n            rec = client.read_by_id(Ref(\"2e9ab42e-c9822ff9\"))\n\n            # delete the rec\n            client.commit_remove(rec)\n        ```\n\n        Parameters:\n            recs:\n                Records to be removed from the database. Each record (or row) must at\n                minimum define `id` and `mod` columns.\n\n        Returns:\n            An empty `Grid`.\n        \"\"\"\n        meta = {\"commit\": \"remove\"}\n        if isinstance(recs, Grid):\n            meta = recs.meta | meta\n            recs = recs.rows\n        return self.call(\"commit\", Grid.to_grid(recs, meta))\n\n    def eval(self, expr: str) -&gt; Grid:\n        \"\"\"Evaluates an Axon string expression.\n\n        **Errors**\n\n        After the request `Grid` is successfully read by the server, the server\n        may respond with a `Grid` that triggers one of the following errors to be\n        raised:\n\n        1. `ErrorGridError` if the operation fails\n        2. `IncompleteDataError` if incomplete data is being returned\n\n        **Additional info**\n\n        See Haxall's Eval operation docs for more details\n        [here](https://haxall.io/doc/lib-hx/op~eval).\n\n        **Example:**\n\n        ```python\n        from phable import open_haxall_client\n\n        # define these settings specific to your use case\n        uri = \"http://localhost:8080/api/demo\"\n        username = \"&lt;username&gt;\"\n        password = \"&lt;password&gt;\"\n\n        # define an axon expression to evaluate on the server\n        axon_expr = \"read(power and point and equipRef-&gt;siteMeter).hisRead(lastMonth)\"\n\n        with open_haxall_client(uri, username, password) as client:\n            his_grid = client.eval(axon_expr)\n\n        his_df_meta, his_df = his_grid.to_polars_all()\n        ```\n\n        Parameters:\n            expr: Axon string expression.\n\n        Returns:\n            `Grid` with the server's response.\n        \"\"\"\n        return self.call(\"eval\", Grid.to_grid({\"expr\": expr}))\n\n    def file_get(self, remote_file_uri: str) -&gt; BufferedReader:\n        \"\"\"Fetches content from a file on the server and returns a buffered binary stream.\n\n        The data in the HTTP response is not logged since a buffered reader can only be read once.\n\n        Phable users should manually close the returned stream as shown in the example below.\n\n        **Note:**  This method is experimental and subject to change.\n\n        **Example:**\n\n        ```python\n        from phable import open_haxall_client\n\n        # define these settings specific to your use case\n        uri = \"http://localhost:8080/api/demo\"\n        username = \"&lt;username&gt;\"\n        password = \"&lt;password&gt;\"\n\n        with open_haxall_client(uri, username, password) as client:\n            stream = client.file_get(\"/proj/demo/io/data.txt\")\n\n            # write data from the stream to a local file called data.txt\n            with open(\"data.txt\", \"wb\") as file:\n                file.write(stream.read())\n\n            # don't forget to close the stream when finished!\n            stream.close()\n        ```\n\n        Parameters:\n            remote_file_uri:\n                URI of the remote file that has content being fetched.\n\n        Returns:\n            A buffered binary stream that is readable.\n        \"\"\"\n        remote_file_url = self.uri + \"/file\" + remote_file_uri\n\n        mimetype = mimetypes.guess_type(remote_file_url)[0]\n        if mimetype is None:\n            raise ValueError\n\n        headers = {\n            \"Authorization\": f\"BEARER authToken={self._auth_token}\",\n            \"Accept\": mimetype,\n        }\n\n        res = request(\n            url=remote_file_url,\n            headers=headers,\n            context=self._context,\n        )\n\n        return BufferedReader(res)\n\n    def file_post(self, stream: BufferedReader, remote_file_uri: str) -&gt; dict[str, Any]:\n        \"\"\"Uploads a file to a project using the HTTP POST method.\n\n        If a file with the same name already exists on the server, then the uploaded file will be renamed.\n\n        **Note:**  This method is experimental and subject to change.\n\n        **Example:**\n\n        ```python\n        from phable import open_haxall_client\n\n        # define these settings specific to your use case\n        uri = \"http://localhost:8080/api/demo\"\n        username = \"&lt;username&gt;\"\n        password = \"&lt;password&gt;\"\n\n        with open_haxall_client(uri, username, password) as client:\n            # use stream from local file data.txt to upload file on server\n            with open(\"data.txt\", \"rb\") as file:\n                res_data = client.file_post(file, \"/proj/demo/io/data.txt\")\n        ```\n\n        Raises:\n            ValueError:\n                Server did not return a Grid with the URI that file content was written to.\n\n        Parameters:\n            stream:\n                A buffered binary stream used for writing content to the remote file.\n            remote_file_uri:\n                URI that file content is intended to be written to.\n\n        Returns:\n            A dictionary of data containing the URI the file content was written to.\n        \"\"\"\n        return self._upload_file(stream, remote_file_uri, \"POST\")\n\n    def file_put(self, stream: BufferedReader, remote_file_uri: str) -&gt; dict[str, Any]:\n        \"\"\"Uploads a file to a project using the HTTP PUT method.\n\n        If a file with the same name already exists on the server, then the existing file will be overwritten with the uploaded file.\n\n        **Note:**  This method is experimental and subject to change.\n\n        **Example:**\n\n        ```python\n        from phable import open_haxall_client\n\n        # define these settings specific to your use case\n        uri = \"http://localhost:8080/api/demo\"\n        username = \"&lt;username&gt;\"\n        password = \"&lt;password&gt;\"\n\n        with open_haxall_client(uri, username, password) as client:\n            # use stream from local file data.txt to upload file on server\n            with open(\"data.txt\", \"rb\") as file:\n                res_data = client.file_put(file, \"/proj/demo/io/data.txt\")\n        ```\n\n        Raises:\n            ValueError:\n                Server did not return a Grid with the URI that file content was written to.\n\n        Parameters:\n            stream:\n                A buffered binary stream used for writing content to the remote file.\n            remote_file_uri:\n                URI of the remote file that content will be written to.\n\n        Returns:\n            A dictionary of data containing the URI the file content was written to.\n        \"\"\"\n        return self._upload_file(stream, remote_file_uri, \"PUT\")\n\n    def _upload_file(\n        self, stream: BufferedReader, remote_file_uri: str, http_method: str\n    ) -&gt; dict[str, Any]:\n        mimetype = mimetypes.guess_type(remote_file_uri)[0]\n        if mimetype is None:\n            raise ValueError\n\n        data = stream.read()\n        stream.close()\n\n        headers = {\n            \"Content-Type\": mimetype,\n            \"Authorization\": f\"BEARER authToken={self._auth_token}\",\n            \"Accept\": self._content_type,\n        }\n\n        res = self._ph_decoder.decode(\n            ph_request(\n                self.uri + \"/file\" + remote_file_uri,\n                headers,\n                self._content_type,\n                data,\n                method=http_method,\n                context=self._context,\n            ).body\n        )\n\n        try:\n            res_data = res.rows[0]\n        except IndexError:\n            raise ValueError\n\n        if isinstance(res_data.get(\"uri\"), Uri) is False:\n            raise ValueError\n\n        return res_data\n</code></pre>"},{"location":"haxall_client/#phable.haxall_client.HaxallClient.commit_add","title":"commit_add","text":"<pre><code>commit_add(recs)\n</code></pre> <p>Adds one or more new records to the database.</p> <p>As a general rule you should not have an <code>id</code> column in your commit grid. However if you wish to predefine the id of the records, you can specify an <code>id</code> column in the commit grid.</p> <p>Commit access requires the API user to have admin permission.</p> <p>Errors</p> <p>After the request <code>Grid</code> is successfully read by the server, the server may respond with a <code>Grid</code> that triggers one of the following errors to be raised:</p> <ol> <li><code>ErrorGridError</code> if the operation fails</li> <li><code>IncompleteDataError</code> if incomplete data is being returned</li> </ol> <p>Additional info</p> <p>See Haxall's Commit operation docs for more details here.</p> <p>Example:</p> <pre><code>from phable import Marker, open_haxall_client\n\n# define these settings specific to your use case\nuri = \"http://localhost:8080/api/demo\"\nusername = \"&lt;username&gt;\"\npassword = \"&lt;password&gt;\"\n\n# define the rec to add\nrec = [{\"dis\": \"TestRec\", \"testing\": Marker(), \"pytest\": Marker()}]\n\nwith open_haxall_client(uri, username, password) as client:\n    # commit the rec and capture response\n    rec_added_grid = client.commit_add(rec)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>recs</code> <code>dict[str, typing.Any] | list[dict[str, typing.Any]] | phable.kinds.Grid</code> <p>Records to be added to the database.</p> required <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p>The full tag definitions for each of the newly added records.</p> Source code in <code>phable/haxall_client.py</code> <pre><code>def commit_add(self, recs: dict[str, Any] | list[dict[str, Any]] | Grid) -&gt; Grid:\n    \"\"\"Adds one or more new records to the database.\n\n    As a general rule you should not have an `id` column in your commit grid.\n    However if you wish to predefine the id of the records, you can specify an `id`\n    column in the commit grid.\n\n    Commit access requires the API user to have admin permission.\n\n    **Errors**\n\n    After the request `Grid` is successfully read by the server, the server\n    may respond with a `Grid` that triggers one of the following errors to be\n    raised:\n\n    1. `ErrorGridError` if the operation fails\n    2. `IncompleteDataError` if incomplete data is being returned\n\n    **Additional info**\n\n    See Haxall's Commit operation docs for more details\n    [here](https://haxall.io/doc/lib-hx/op~commit).\n\n    **Example:**\n\n    ```python\n    from phable import Marker, open_haxall_client\n\n    # define these settings specific to your use case\n    uri = \"http://localhost:8080/api/demo\"\n    username = \"&lt;username&gt;\"\n    password = \"&lt;password&gt;\"\n\n    # define the rec to add\n    rec = [{\"dis\": \"TestRec\", \"testing\": Marker(), \"pytest\": Marker()}]\n\n    with open_haxall_client(uri, username, password) as client:\n        # commit the rec and capture response\n        rec_added_grid = client.commit_add(rec)\n    ```\n\n    Parameters:\n        recs: Records to be added to the database.\n\n    Returns:\n        The full tag definitions for each of the newly added records.\n    \"\"\"\n    meta = {\"commit\": \"add\"}\n    if isinstance(recs, Grid):\n        meta = recs.meta | meta\n        recs = recs.rows\n    return self.call(\"commit\", Grid.to_grid(recs, meta))\n</code></pre>"},{"location":"haxall_client/#phable.haxall_client.HaxallClient.commit_remove","title":"commit_remove","text":"<pre><code>commit_remove(recs)\n</code></pre> <p>Removes one or more records from the database.</p> <p>Commit access requires the API user to have admin permission.</p> <p>Errors</p> <p>An <code>ErrorGridError</code> is raised if any of the recs do not exist on the server.</p> <p>Also, after the request <code>Grid</code> is successfully read by the server, the server may respond with a <code>Grid</code> that triggers one of the following errors to be raised:</p> <ol> <li><code>ErrorGridError</code> if the operation fails</li> <li><code>IncompleteDataError</code> if incomplete data is being returned</li> </ol> <p>Additional info</p> <p>See Haxall's Commit operation docs for more details here.</p> <p>Example:</p> <pre><code>from phable import Ref, open_haxall_client\n\n# define these settings specific to your use case\nuri = \"http://localhost:8080/api/demo\"\nusername = \"&lt;username&gt;\"\npassword = \"&lt;password&gt;\"\n\nwith open_haxall_client(uri, username, password) as client:\n    # query entire rec you want to delete to get the mod tag\n    rec = client.read_by_id(Ref(\"2e9ab42e-c9822ff9\"))\n\n    # delete the rec\n    client.commit_remove(rec)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>recs</code> <code>dict[str, typing.Any] | list[dict[str, typing.Any]] | phable.kinds.Grid</code> <p>Records to be removed from the database. Each record (or row) must at minimum define <code>id</code> and <code>mod</code> columns.</p> required <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p>An empty <code>Grid</code>.</p> Source code in <code>phable/haxall_client.py</code> <pre><code>def commit_remove(self, recs: dict[str, Any] | list[dict[str, Any]] | Grid) -&gt; Grid:\n    \"\"\"Removes one or more records from the database.\n\n    Commit access requires the API user to have admin permission.\n\n    **Errors**\n\n    An `ErrorGridError` is raised if any of the recs do not exist on\n    the server.\n\n    Also, after the request `Grid` is successfully read by the server, the server\n    may respond with a `Grid` that triggers one of the following errors to be\n    raised:\n\n    1. `ErrorGridError` if the operation fails\n    2. `IncompleteDataError` if incomplete data is being returned\n\n    **Additional info**\n\n    See Haxall's Commit operation docs for more details\n    [here](https://haxall.io/doc/lib-hx/op~commit).\n\n    **Example:**\n\n    ```python\n    from phable import Ref, open_haxall_client\n\n    # define these settings specific to your use case\n    uri = \"http://localhost:8080/api/demo\"\n    username = \"&lt;username&gt;\"\n    password = \"&lt;password&gt;\"\n\n    with open_haxall_client(uri, username, password) as client:\n        # query entire rec you want to delete to get the mod tag\n        rec = client.read_by_id(Ref(\"2e9ab42e-c9822ff9\"))\n\n        # delete the rec\n        client.commit_remove(rec)\n    ```\n\n    Parameters:\n        recs:\n            Records to be removed from the database. Each record (or row) must at\n            minimum define `id` and `mod` columns.\n\n    Returns:\n        An empty `Grid`.\n    \"\"\"\n    meta = {\"commit\": \"remove\"}\n    if isinstance(recs, Grid):\n        meta = recs.meta | meta\n        recs = recs.rows\n    return self.call(\"commit\", Grid.to_grid(recs, meta))\n</code></pre>"},{"location":"haxall_client/#phable.haxall_client.HaxallClient.commit_update","title":"commit_update","text":"<pre><code>commit_update(recs)\n</code></pre> <p>Updates one or more existing records within the database.</p> <p>Commit access requires the API user to have admin permission.</p> <p>Errors</p> <p>After the request <code>Grid</code> is successfully read by the server, the server may respond with a <code>Grid</code> that triggers one of the following errors to be raised:</p> <ol> <li><code>ErrorGridError</code> if the operation fails</li> <li><code>IncompleteDataError</code> if incomplete data is being returned</li> </ol> <p>Additional info</p> <p>See Haxall's Commit operation docs for more details here.</p> <p>Example:</p> <pre><code>from phable import Ref, open_haxall_client\n\n# define these settings specific to your use case\nuri = \"http://localhost:8080/api/demo\"\nusername = \"&lt;username&gt;\"\npassword = \"&lt;password&gt;\"\n\nwith open_haxall_client(uri, username, password) as client:\n    # query entire rec we want to modify to get the mod tag\n    rec = client.read_by_id(Ref(\"2e9ab42e-c9822ff9\"))\n\n    # define new tag to add to rec\n    rec[\"foo\"] = \"new tag\"\n\n    # commit update to rec and capture response\n    rec_modified_grid = client.commit_update(rec)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>recs</code> <code>dict[str, typing.Any] | list[dict[str, typing.Any]] | phable.kinds.Grid</code> <p>Existing records within the database to be updated. Each record (or row) must at minimum have tags for the rec's existing <code>id</code> and <code>mod</code> columns (defined by the server) and the columns being updated (defined by the client).</p> required <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p>The latest full tag definitions for each of the updated records.</p> Source code in <code>phable/haxall_client.py</code> <pre><code>def commit_update(self, recs: dict[str, Any] | list[dict[str, Any]] | Grid) -&gt; Grid:\n    \"\"\"Updates one or more existing records within the database.\n\n    Commit access requires the API user to have admin permission.\n\n    **Errors**\n\n    After the request `Grid` is successfully read by the server, the server\n    may respond with a `Grid` that triggers one of the following errors to be\n    raised:\n\n    1. `ErrorGridError` if the operation fails\n    2. `IncompleteDataError` if incomplete data is being returned\n\n    **Additional info**\n\n    See Haxall's Commit operation docs for more details\n    [here](https://haxall.io/doc/lib-hx/op~commit).\n\n    **Example:**\n\n    ```python\n    from phable import Ref, open_haxall_client\n\n    # define these settings specific to your use case\n    uri = \"http://localhost:8080/api/demo\"\n    username = \"&lt;username&gt;\"\n    password = \"&lt;password&gt;\"\n\n    with open_haxall_client(uri, username, password) as client:\n        # query entire rec we want to modify to get the mod tag\n        rec = client.read_by_id(Ref(\"2e9ab42e-c9822ff9\"))\n\n        # define new tag to add to rec\n        rec[\"foo\"] = \"new tag\"\n\n        # commit update to rec and capture response\n        rec_modified_grid = client.commit_update(rec)\n    ```\n\n    Parameters:\n        recs:\n            Existing records within the database to be updated. Each record (or\n            row) must at minimum have tags for the rec's existing `id` and `mod`\n            columns (defined by the server) and the columns being updated (defined\n            by the client).\n\n    Returns:\n        The latest full tag definitions for each of the updated records.\n    \"\"\"\n    meta = {\"commit\": \"update\"}\n    if isinstance(recs, Grid):\n        meta = recs.meta | meta\n        recs = recs.rows\n    return self.call(\"commit\", Grid.to_grid(recs, meta))\n</code></pre>"},{"location":"haxall_client/#phable.haxall_client.HaxallClient.eval","title":"eval","text":"<pre><code>eval(expr)\n</code></pre> <p>Evaluates an Axon string expression.</p> <p>Errors</p> <p>After the request <code>Grid</code> is successfully read by the server, the server may respond with a <code>Grid</code> that triggers one of the following errors to be raised:</p> <ol> <li><code>ErrorGridError</code> if the operation fails</li> <li><code>IncompleteDataError</code> if incomplete data is being returned</li> </ol> <p>Additional info</p> <p>See Haxall's Eval operation docs for more details here.</p> <p>Example:</p> <pre><code>from phable import open_haxall_client\n\n# define these settings specific to your use case\nuri = \"http://localhost:8080/api/demo\"\nusername = \"&lt;username&gt;\"\npassword = \"&lt;password&gt;\"\n\n# define an axon expression to evaluate on the server\naxon_expr = \"read(power and point and equipRef-&gt;siteMeter).hisRead(lastMonth)\"\n\nwith open_haxall_client(uri, username, password) as client:\n    his_grid = client.eval(axon_expr)\n\nhis_df_meta, his_df = his_grid.to_polars_all()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>expr</code> <code>str</code> <p>Axon string expression.</p> required <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p><code>Grid</code> with the server's response.</p> Source code in <code>phable/haxall_client.py</code> <pre><code>def eval(self, expr: str) -&gt; Grid:\n    \"\"\"Evaluates an Axon string expression.\n\n    **Errors**\n\n    After the request `Grid` is successfully read by the server, the server\n    may respond with a `Grid` that triggers one of the following errors to be\n    raised:\n\n    1. `ErrorGridError` if the operation fails\n    2. `IncompleteDataError` if incomplete data is being returned\n\n    **Additional info**\n\n    See Haxall's Eval operation docs for more details\n    [here](https://haxall.io/doc/lib-hx/op~eval).\n\n    **Example:**\n\n    ```python\n    from phable import open_haxall_client\n\n    # define these settings specific to your use case\n    uri = \"http://localhost:8080/api/demo\"\n    username = \"&lt;username&gt;\"\n    password = \"&lt;password&gt;\"\n\n    # define an axon expression to evaluate on the server\n    axon_expr = \"read(power and point and equipRef-&gt;siteMeter).hisRead(lastMonth)\"\n\n    with open_haxall_client(uri, username, password) as client:\n        his_grid = client.eval(axon_expr)\n\n    his_df_meta, his_df = his_grid.to_polars_all()\n    ```\n\n    Parameters:\n        expr: Axon string expression.\n\n    Returns:\n        `Grid` with the server's response.\n    \"\"\"\n    return self.call(\"eval\", Grid.to_grid({\"expr\": expr}))\n</code></pre>"},{"location":"haxall_client/#phable.haxall_client.HaxallClient.file_get","title":"file_get","text":"<pre><code>file_get(remote_file_uri)\n</code></pre> <p>Fetches content from a file on the server and returns a buffered binary stream.</p> <p>The data in the HTTP response is not logged since a buffered reader can only be read once.</p> <p>Phable users should manually close the returned stream as shown in the example below.</p> <p>Note:  This method is experimental and subject to change.</p> <p>Example:</p> <pre><code>from phable import open_haxall_client\n\n# define these settings specific to your use case\nuri = \"http://localhost:8080/api/demo\"\nusername = \"&lt;username&gt;\"\npassword = \"&lt;password&gt;\"\n\nwith open_haxall_client(uri, username, password) as client:\n    stream = client.file_get(\"/proj/demo/io/data.txt\")\n\n    # write data from the stream to a local file called data.txt\n    with open(\"data.txt\", \"wb\") as file:\n        file.write(stream.read())\n\n    # don't forget to close the stream when finished!\n    stream.close()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>remote_file_uri</code> <code>str</code> <p>URI of the remote file that has content being fetched.</p> required <p>Returns:</p> Type Description <code>io.BufferedReader</code> <p>A buffered binary stream that is readable.</p> Source code in <code>phable/haxall_client.py</code> <pre><code>def file_get(self, remote_file_uri: str) -&gt; BufferedReader:\n    \"\"\"Fetches content from a file on the server and returns a buffered binary stream.\n\n    The data in the HTTP response is not logged since a buffered reader can only be read once.\n\n    Phable users should manually close the returned stream as shown in the example below.\n\n    **Note:**  This method is experimental and subject to change.\n\n    **Example:**\n\n    ```python\n    from phable import open_haxall_client\n\n    # define these settings specific to your use case\n    uri = \"http://localhost:8080/api/demo\"\n    username = \"&lt;username&gt;\"\n    password = \"&lt;password&gt;\"\n\n    with open_haxall_client(uri, username, password) as client:\n        stream = client.file_get(\"/proj/demo/io/data.txt\")\n\n        # write data from the stream to a local file called data.txt\n        with open(\"data.txt\", \"wb\") as file:\n            file.write(stream.read())\n\n        # don't forget to close the stream when finished!\n        stream.close()\n    ```\n\n    Parameters:\n        remote_file_uri:\n            URI of the remote file that has content being fetched.\n\n    Returns:\n        A buffered binary stream that is readable.\n    \"\"\"\n    remote_file_url = self.uri + \"/file\" + remote_file_uri\n\n    mimetype = mimetypes.guess_type(remote_file_url)[0]\n    if mimetype is None:\n        raise ValueError\n\n    headers = {\n        \"Authorization\": f\"BEARER authToken={self._auth_token}\",\n        \"Accept\": mimetype,\n    }\n\n    res = request(\n        url=remote_file_url,\n        headers=headers,\n        context=self._context,\n    )\n\n    return BufferedReader(res)\n</code></pre>"},{"location":"haxall_client/#phable.haxall_client.HaxallClient.file_post","title":"file_post","text":"<pre><code>file_post(stream, remote_file_uri)\n</code></pre> <p>Uploads a file to a project using the HTTP POST method.</p> <p>If a file with the same name already exists on the server, then the uploaded file will be renamed.</p> <p>Note:  This method is experimental and subject to change.</p> <p>Example:</p> <pre><code>from phable import open_haxall_client\n\n# define these settings specific to your use case\nuri = \"http://localhost:8080/api/demo\"\nusername = \"&lt;username&gt;\"\npassword = \"&lt;password&gt;\"\n\nwith open_haxall_client(uri, username, password) as client:\n    # use stream from local file data.txt to upload file on server\n    with open(\"data.txt\", \"rb\") as file:\n        res_data = client.file_post(file, \"/proj/demo/io/data.txt\")\n</code></pre> <p>Raises:</p> Type Description <code>ValueError</code> <p>Server did not return a Grid with the URI that file content was written to.</p> <p>Parameters:</p> Name Type Description Default <code>stream</code> <code>io.BufferedReader</code> <p>A buffered binary stream used for writing content to the remote file.</p> required <code>remote_file_uri</code> <code>str</code> <p>URI that file content is intended to be written to.</p> required <p>Returns:</p> Type Description <code>dict[str, typing.Any]</code> <p>A dictionary of data containing the URI the file content was written to.</p> Source code in <code>phable/haxall_client.py</code> <pre><code>def file_post(self, stream: BufferedReader, remote_file_uri: str) -&gt; dict[str, Any]:\n    \"\"\"Uploads a file to a project using the HTTP POST method.\n\n    If a file with the same name already exists on the server, then the uploaded file will be renamed.\n\n    **Note:**  This method is experimental and subject to change.\n\n    **Example:**\n\n    ```python\n    from phable import open_haxall_client\n\n    # define these settings specific to your use case\n    uri = \"http://localhost:8080/api/demo\"\n    username = \"&lt;username&gt;\"\n    password = \"&lt;password&gt;\"\n\n    with open_haxall_client(uri, username, password) as client:\n        # use stream from local file data.txt to upload file on server\n        with open(\"data.txt\", \"rb\") as file:\n            res_data = client.file_post(file, \"/proj/demo/io/data.txt\")\n    ```\n\n    Raises:\n        ValueError:\n            Server did not return a Grid with the URI that file content was written to.\n\n    Parameters:\n        stream:\n            A buffered binary stream used for writing content to the remote file.\n        remote_file_uri:\n            URI that file content is intended to be written to.\n\n    Returns:\n        A dictionary of data containing the URI the file content was written to.\n    \"\"\"\n    return self._upload_file(stream, remote_file_uri, \"POST\")\n</code></pre>"},{"location":"haxall_client/#phable.haxall_client.HaxallClient.file_put","title":"file_put","text":"<pre><code>file_put(stream, remote_file_uri)\n</code></pre> <p>Uploads a file to a project using the HTTP PUT method.</p> <p>If a file with the same name already exists on the server, then the existing file will be overwritten with the uploaded file.</p> <p>Note:  This method is experimental and subject to change.</p> <p>Example:</p> <pre><code>from phable import open_haxall_client\n\n# define these settings specific to your use case\nuri = \"http://localhost:8080/api/demo\"\nusername = \"&lt;username&gt;\"\npassword = \"&lt;password&gt;\"\n\nwith open_haxall_client(uri, username, password) as client:\n    # use stream from local file data.txt to upload file on server\n    with open(\"data.txt\", \"rb\") as file:\n        res_data = client.file_put(file, \"/proj/demo/io/data.txt\")\n</code></pre> <p>Raises:</p> Type Description <code>ValueError</code> <p>Server did not return a Grid with the URI that file content was written to.</p> <p>Parameters:</p> Name Type Description Default <code>stream</code> <code>io.BufferedReader</code> <p>A buffered binary stream used for writing content to the remote file.</p> required <code>remote_file_uri</code> <code>str</code> <p>URI of the remote file that content will be written to.</p> required <p>Returns:</p> Type Description <code>dict[str, typing.Any]</code> <p>A dictionary of data containing the URI the file content was written to.</p> Source code in <code>phable/haxall_client.py</code> <pre><code>def file_put(self, stream: BufferedReader, remote_file_uri: str) -&gt; dict[str, Any]:\n    \"\"\"Uploads a file to a project using the HTTP PUT method.\n\n    If a file with the same name already exists on the server, then the existing file will be overwritten with the uploaded file.\n\n    **Note:**  This method is experimental and subject to change.\n\n    **Example:**\n\n    ```python\n    from phable import open_haxall_client\n\n    # define these settings specific to your use case\n    uri = \"http://localhost:8080/api/demo\"\n    username = \"&lt;username&gt;\"\n    password = \"&lt;password&gt;\"\n\n    with open_haxall_client(uri, username, password) as client:\n        # use stream from local file data.txt to upload file on server\n        with open(\"data.txt\", \"rb\") as file:\n            res_data = client.file_put(file, \"/proj/demo/io/data.txt\")\n    ```\n\n    Raises:\n        ValueError:\n            Server did not return a Grid with the URI that file content was written to.\n\n    Parameters:\n        stream:\n            A buffered binary stream used for writing content to the remote file.\n        remote_file_uri:\n            URI of the remote file that content will be written to.\n\n    Returns:\n        A dictionary of data containing the URI the file content was written to.\n    \"\"\"\n    return self._upload_file(stream, remote_file_uri, \"PUT\")\n</code></pre>"},{"location":"haystack_client/","title":"<code>HaystackClient</code>","text":""},{"location":"haystack_client/#phable.open_haystack_client","title":"open_haystack_client","text":"<pre><code>open_haystack_client(uri, username, password, *, content_type='json', ssl_context=None)\n</code></pre> <p>Context manager for opening and closing a session with a Project Haystack defined server application. May help prevent accidentially leaving a session with the server open.</p> <p><code>open_haystack_client</code> can be directly imported as follows:</p> <pre><code>from phable import open_haystack_client\n</code></pre> <p>Example:</p> <pre><code>from phable import open_haystack_client\n\nuri = \"http://localhost:8080/api/demo\"\nwith open_haystack_client(uri, \"su\", \"password\") as client:\n    print(client.about())\n</code></pre> <p>Note: This context manager uses Project Haystack's close op, which was later introduced. Therefore the context manager may not work with some servers.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>URI of endpoint such as \"http://host/api/myProj/\".</p> required <code>username</code> <code>str</code> <p>Username for the API user.</p> required <code>password</code> <code>str</code> <p>Password for the API user.</p> required <code>content_type</code> <code>str</code> <p>Format of data exchanged via HTTP. \"json\" and \"zinc\" options are supported.</p> <code>'json'</code> <code>ssl_context</code> <code>ssl.SSLContext | None</code> <p>Optional SSL context. If not provided, a SSL context with default settings is created and used.</p> <code>None</code> Source code in <code>phable/haystack_client.py</code> <pre><code>@contextmanager\ndef open_haystack_client(\n    uri: str,\n    username: str,\n    password: str,\n    *,\n    content_type: str = \"json\",\n    ssl_context: SSLContext | None = None,\n) -&gt; Generator[HaystackClient, None, None]:\n    \"\"\"Context manager for opening and closing a session with a Project Haystack\n    defined server application. May help prevent accidentially leaving a session with\n    the server open.\n\n    `open_haystack_client` can be directly imported as follows:\n\n    ```python\n    from phable import open_haystack_client\n    ```\n\n    **Example:**\n\n    ```python\n    from phable import open_haystack_client\n\n    uri = \"http://localhost:8080/api/demo\"\n    with open_haystack_client(uri, \"su\", \"password\") as client:\n        print(client.about())\n    ```\n\n    **Note:** This context manager uses Project Haystack's\n    [close op](https://project-haystack.org/doc/docHaystack/Ops#close), which was\n    later introduced. Therefore the context manager may not work with some servers.\n\n    Parameters:\n        uri: URI of endpoint such as \"http://host/api/myProj/\".\n        username: Username for the API user.\n        password: Password for the API user.\n        content_type:\n            Format of data exchanged via HTTP. \"json\" and \"zinc\" options are supported.\n        ssl_context:\n            Optional SSL context. If not provided, a SSL context with default\n            settings is created and used.\n    \"\"\"\n\n    client = HaystackClient.open(\n        uri, username, password, content_type=content_type, ssl_context=ssl_context\n    )\n    yield client\n    client.close()\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient","title":"HaystackClient","text":"<p>A client interface to a Project Haystack defined server application used for authentication and operations.</p> <p><code>HaystackClient</code> can be directly imported as follows:</p> <pre><code>from phable import HaystackClient\n</code></pre> Source code in <code>phable/haystack_client.py</code> <pre><code>class HaystackClient:\n    \"\"\"A client interface to a Project Haystack defined server application used for\n    authentication and operations.\n\n    `HaystackClient` can be directly imported as follows:\n\n    ```python\n    from phable import HaystackClient\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        uri: str,\n        auth_token: str,\n        *,\n        content_type: str = \"json\",\n        ssl_context: SSLContext | None = None,\n    ):\n        self.uri: str = uri[0:-1] if uri[-1] == \"/\" else uri\n        self._auth_token: str = auth_token\n        self._context: SSLContext | None = ssl_context\n\n        io_factory = PH_IO_FACTORY[content_type]\n        self._ph_encoder = io_factory[\"encoder\"]\n        self._ph_decoder = io_factory[\"decoder\"]\n        self._content_type = io_factory[\"content_type\"]\n\n    @classmethod\n    def open(\n        cls,\n        uri: str,\n        username: str,\n        password: str,\n        *,\n        content_type: str = \"json\",\n        ssl_context: SSLContext | None = None,\n    ) -&gt; Self:\n        \"\"\"Opens a session with the server for the URI of the project.\n\n        Raises:\n            AuthError:\n                Unable to authenticate with the server using the credentials provided.\n            urllib.error.URLError:\n                URL is not known or lacks the required http prefix.\n\n        Parameters:\n            uri: URI of endpoint such as \"http://host/api/myProj/\".\n            username: Username for the API user.\n            password: Password for the API user.\n            content_type:\n                Format of data exchanged via HTTP. \"json\" and \"zinc\" options are supported.\n            ssl_context:\n                Optional SSL context. If not provided, a SSL context with default\n                settings is created and used.\n\n        Returns:\n            An instance of the class this method is used on (i.e., Client or HxClient).\n        \"\"\"\n\n        scram = ScramScheme(uri, username, password, content_type, ssl_context)\n        auth_token = scram.get_auth_token()\n\n        return cls(uri, auth_token, content_type=content_type, ssl_context=ssl_context)\n\n    def about(self) -&gt; dict[str, Any]:\n        \"\"\"Query basic information about the server.\n\n        Returns:\n            A `dict` containing information about the server.\n        \"\"\"\n        return self.call(\"about\").rows[0]\n\n    def close(self) -&gt; Grid:\n        \"\"\"Close the connection to the server.\n\n        **Note:** Project Haystack recently defined the Close operation. Some servers\n        may not support this operation.\n\n        Returns:\n            An empty `Grid`.\n        \"\"\"\n\n        return self.call(\"close\")\n\n    def read(self, filter: str, checked: bool = True) -&gt; dict[Any, Any]:\n        \"\"\"Read from the database the first record which matches the\n        [filter](https://project-haystack.org/doc/docHaystack/Filters).\n\n        Raises:\n            UnknownRecError: Server's response does not include requested rec.\n\n        Parameters:\n            filter:\n                Project Haystack defined\n                [filter](https://project-haystack.org/doc/docHaystack/Filters) for\n                querying the server.\n            checked:\n                If `checked` is equal to false and the record cannot be found, an empty\n                `dict` is returned. If `checked` is equal to true and the record cannot\n                be found, an `UnknownRecError` is raised.\n\n        Returns:\n            An empty `dict` or a `dict` that describes the entity read.\n        \"\"\"\n        response = self.read_all(filter, Number(1))\n\n        if len(response.rows) == 0:\n            if checked is True:\n                raise UnknownRecError(\n                    \"Unable to locate an entity on the server that matches the filter.\"\n                )\n            else:\n                response = {}\n        else:\n            response = response.rows[0]\n\n        return response\n\n    def read_all(self, filter: str, limit: int | None = None) -&gt; Grid:\n        \"\"\"Read all records from the database which match the\n        [filter](https://project-haystack.org/doc/docHaystack/Filters).\n\n        Parameters:\n            filter:\n                Project Haystack defined\n                [filter](https://project-haystack.org/doc/docHaystack/Filters) for\n                querying the server.\n            limit: Maximum number of entities to return in response.\n\n        Returns:\n            An empty `Grid` or a `Grid` that has a row for each entity read.\n        \"\"\"\n        data_row = {\"filter\": filter}\n\n        if limit is not None:\n            data_row[\"limit\"] = limit\n\n        response = self.call(\"read\", Grid.to_grid(data_row))\n\n        return response\n\n    def read_by_id(self, id: Ref, checked: bool = True) -&gt; dict[Any, Any]:\n        \"\"\"Read an entity record using its unique identifier.\n\n        Raises:\n            UnknownRecError: Server's response does not include requested rec.\n\n        Parameters:\n            id: Unique identifier for the record being read.\n            checked:\n                If `checked` is equal to false and the record cannot be found, an empty\n                `dict` is returned. If `checked` is equal to true and the record cannot\n                be found, an `UnknownRecError` is raised.\n\n        Returns:\n            An empty `dict` or a `dict` that describes the entity read.\n        \"\"\"\n\n        data_rows = [{\"id\": id}]\n        post_data = Grid.to_grid(data_rows)\n        response = self.call(\"read\", post_data)\n\n        if len(response.rows) == 0:\n            if checked is True:\n                raise UnknownRecError(\"Unable to locate the id on the server.\")\n            else:\n                response = {}\n        else:\n            response = response.rows[0]\n\n        return response\n\n    def read_by_ids(self, ids: list[Ref]) -&gt; Grid:\n        \"\"\"Read a set of entity records using their unique identifiers.\n\n        **Note:** Project Haystack recently introduced batch read support, which might\n        not be supported by some servers. If your server does not support the batch\n        read feature, then try using the `Client.read_by_id()` method instead.\n\n        Raises:\n            UnknownRecError: Server's response does not include requested recs.\n\n        Parameters:\n            ids: Unique identifiers for the records being read.\n\n        Returns:\n            `Grid` with a row for each entity read.\n        \"\"\"\n        ids = ids.copy()\n        data_rows = [{\"id\": id} for id in ids]\n        post_data = Grid.to_grid(data_rows)\n        response = self.call(\"read\", post_data)\n\n        if len(response.rows) != len(ids):\n            raise UnknownRecError(\"Unable to locate one or more ids on the server.\")\n        for row in response.rows:\n            if len(row) == 0:\n                raise UnknownRecError(\"Unable to locate one or more ids on the server.\")\n\n        return response\n\n    def his_read_by_id(\n        self,\n        id: Ref,\n        range: date | DateRange | DateTimeRange,\n    ) -&gt; Grid:\n        \"\"\"Read history data associated with `id` for the given `range`.\n\n        When there is an existing `Grid` describing point records, it is worth\n        considering to use the `Client.his_read()` method to store available\n        metadata within the returned `Grid`.\n\n        **Example:**\n\n        ```python\n        from datetime import date, timedelta\n\n        from phable import DateRange, Ref, open_haystack_client\n\n        # define these settings specific to your use case\n        uri = \"http://localhost:8080/api/demo\"\n        username = \"&lt;username&gt;\"\n        password = \"&lt;password&gt;\"\n\n        # update the id for your server\n        id1 = Ref(\"2e749080-d2645928\")\n\n        end = date.today()\n        start = end - timedelta(days=2)\n        range = DateRange(start, end)\n\n        with open_haystack_client(uri, username, password) as client:\n            his_grid = client.his_read_by_id(id1, range)\n\n        his_df_meta, his_df = his_grid.to_polars_all()\n        ```\n\n        Parameters:\n            id:\n                Unique identifier for the point record associated with the requested\n                history data.\n            range:\n                Ranges are inclusive of start timestamp and exclusive of end timestamp.\n                If a date is provided without a defined end, then the server should\n                infer the range to be from midnight of the defined date to midnight of\n                the day after the defined date.\n\n        Returns:\n            `Grid` with history data associated with the `id` for the given `range`.\n        \"\"\"\n        data = _create_his_read_req_data(id, range)\n        response = self.call(\"hisRead\", data)\n\n        return response\n\n    def his_read_by_ids(\n        self,\n        ids: list[Ref],\n        range: date | DateRange | DateTimeRange,\n    ) -&gt; Grid:\n        \"\"\"Read history data associated with `ids` for the given `range`.\n\n        When there is an existing `Grid` describing point records, it is worth\n        considering to use the `Client.his_read()` method to store available\n        metadata within the returned `Grid`.\n\n        **Note:** Project Haystack recently defined batch history read support.  Some\n        Project Haystack servers may not support reading history data for more than one\n        point record at a time.\n\n        **Example:**\n\n        ```python\n        from datetime import date, timedelta\n\n        from phable import DateRange, Ref, open_haystack_client\n\n        # define these settings specific to your use case\n        uri = \"http://localhost:8080/api/demo\"\n        username = \"&lt;username&gt;\"\n        password = \"&lt;password&gt;\"\n\n        # update the ids for your server\n        id1 = Ref(\"2e749080-d2645928\")\n        id2 = Ref(\"2e749080-4719193b\")\n\n        end = date.today()\n        start = end - timedelta(days=2)\n        range = DateRange(start, end)\n\n        with open_haystack_client(uri, username, password) as client:\n            his_grid = client.his_read_by_ids([id1, id2], range)\n\n        his_df_meta, his_df = his_grid.to_polars_all()\n        ```\n\n        Parameters:\n            ids:\n                Unique identifiers for the point records associated with the requested\n                history data.\n            range:\n                Ranges are inclusive of start timestamp and exclusive of end timestamp.\n                If a date is provided without a defined end, then the server should\n                infer the range to be from midnight of the defined date to midnight of\n                the day after the defined date.\n\n        Returns:\n            `Grid` with history data associated with the `ids` for the given `range`.\n        \"\"\"\n        data = _create_his_read_req_data(ids, range)\n        response = self.call(\"hisRead\", data)\n\n        return response\n\n    def his_write_by_id(\n        self,\n        id: Ref,\n        his_rows: list[dict[str, Any]],\n    ) -&gt; Grid:\n        \"\"\"Write history data to point records on the server.\n\n        History row key values must be valid data types defined for `Phable`.\n\n        History row key names must be `ts` or `val`.  Values in the column named `val`\n        are for the `Ref` described by the `id` parameter.\n\n        **Additional requirements**\n\n        1. Timestamp and value kind of `his_row` data must match the entity's (Ref)\n        configured timezone and kind\n        2. Numeric data must match the entity's (Ref) configured unit or status of\n        being unitless\n\n        **Recommendations for enhanced performance**\n\n        1. Avoid posting out-of-order or duplicate data\n\n        **Example:**\n\n        ```python\n        from datetime import datetime, timedelta\n        from zoneinfo import ZoneInfo\n\n        from phable import Number, Ref, open_haystack_client\n\n        # define these settings specific to your use case\n        uri = \"http://localhost:8080/api/demo\"\n        username = \"&lt;username&gt;\"\n        password = \"&lt;password&gt;\"\n\n        # make sure datetime objects are timezone aware\n        ts_now = datetime.now(ZoneInfo(\"America/New_York\"))\n\n        his_rows = [\n            {\n                \"ts\": ts_now - timedelta(seconds=30),\n                \"val\": Number(1_000.0, \"kW\"),\n            },\n            {\n                \"ts\": ts_now,\n                \"val\": Number(2_000.0, \"kW\"),\n            },\n        ]\n\n        # update the id for your server\n        id1 = Ref(\"2e749080-3cad46c0\")\n\n        with open_haystack_client(uri, username, password) as client:\n            client.his_write_by_id(id1, data_rows)\n        ```\n\n        Parameters:\n            id: Unique identifier for the point record.\n            his_rows: History data to be written for the `id`.\n\n        Returns:\n            An empty `Grid`.\n        \"\"\"\n        meta = {\"id\": id}\n        his_grid = Grid.to_grid(his_rows, meta)\n        return self.call(\"hisWrite\", his_grid)\n\n    def his_write_by_ids(\n        self,\n        ids: list[Ref],\n        his_rows: list[dict[str, Any]],\n    ) -&gt; Grid:\n        \"\"\"Write history data to point records on the server.\n\n        History row key values must be valid data types defined for `Phable`.\n\n        History row key names must be `ts` or `vX` where `X` is an integer equal\n        to or greater than zero.  Also, `X` must not exceed the highest index of `ids`.\n\n        The index of an id in `ids` corresponds to the column name used in `his_rows`.\n\n        **Additional requirements**\n\n        1. Timestamp and value kind of `his_row` data must match the entity's (Ref)\n        configured timezone and kind\n        2. Numeric data must match the entity's (Ref) configured unit or status of\n        being unitless\n\n        **Recommendations for enhanced performance**\n\n        1. Avoid posting out-of-order or duplicate data\n\n        **Batch history write support**\n\n        Project Haystack recently defined batch history write support.  Some Project\n        Haystack servers may not support writing history data to more than one point\n        at a time.  For these instances it is recommended to use a `Ref` type for the\n        `ids` parameter.\n\n        **Example:**\n\n        ```python\n        from datetime import datetime, timedelta\n        from zoneinfo import ZoneInfo\n\n        from phable import Number, Ref, open_haystack_client\n\n        # define these settings specific to your use case\n        uri = \"http://localhost:8080/api/demo\"\n        username = \"&lt;username&gt;\"\n        password = \"&lt;password&gt;\"\n\n        # make sure datetime objects are timezone aware\n        ts_now = datetime.now(ZoneInfo(\"America/New_York\"))\n\n        his_rows = [\n            {\"ts\": ts_now - timedelta(seconds=30), \"v0\": Number(1, \"kW\")},\n            {\"ts\": ts_now, \"v0\": Number(50, \"kW\"), \"v1\": Number(20, \"kW\")},\n        ]\n\n        # update the ids for your server\n        id1 = Ref(\"2e749080-3cad46c0\")\n        id2 = Ref(\"2e749080-520f621b\")\n\n        with open_haystack_client(uri, username, password) as client:\n            client.his_write_by_ids([id1, id2], his_rows)\n        ```\n\n        Parameters:\n            ids: Unique identifiers for the point records.\n            his_rows: History data to be written for the `ids`.\n\n        Returns:\n            An empty `Grid`.\n        \"\"\"\n        meta = {\"ver\": \"3.0\"}\n        cols = [{\"name\": \"ts\"}]\n\n        for count, id in enumerate(ids):\n            cols.append({\"name\": f\"v{count}\", \"meta\": {\"id\": id}})\n\n        his_grid = Grid(meta, cols, his_rows)\n\n        return self.call(\"hisWrite\", his_grid)\n\n    def point_write(\n        self,\n        id: Ref,\n        level: int,\n        val: Number | bool | str | None = None,\n        who: str | None = None,\n        duration: Number | None = None,\n    ) -&gt; Grid:\n        \"\"\"Writes to a given level of a writable point's priority array.\n\n        Parameters:\n            id: Unique identifier of the writable point.\n            level: Integer from 1 - 17 (17 is default).\n            val: Current value at level or null.\n            who:\n                Optional username/application name performing the write. If not\n                provided, the authenticated user display name is used.\n            duration: Optional number with duration unit if setting level 8.\n\n        Returns:\n            `Grid` with the server's response.\n        \"\"\"\n        row = {\"id\": id, \"level\": Number(level)}\n\n        if val is not None:\n            row[\"val\"] = val\n        if who is not None:\n            row[\"who\"] = who\n        if duration is not None:\n            row[\"duration\"] = duration\n\n        return self.call(\"pointWrite\", Grid.to_grid(row))\n\n    def point_write_array(self, id: Ref) -&gt; Grid:\n        \"\"\"Reads the current status of a writable point's priority array.\n\n        Parameters:\n            id: Unique identifier for the record.\n\n        Returns:\n            `Grid` with the server's response.\n        \"\"\"\n        return self.call(\"pointWrite\", Grid.to_grid({\"id\": id}))\n\n    def call(\n        self,\n        path: str,\n        data: Grid = Grid(meta={\"ver\": \"3.0\"}, cols=[{\"name\": \"empty\"}], rows=[]),\n    ) -&gt; Grid:\n        \"\"\"Sends a POST request to `{uri}/{path}` using provided `data`.\n\n        This operation is not defined by Project Haystack. However, other `Client`\n        methods use this method internally.\n\n        Parameters:\n            path:\n                Location on endpoint such that the complete path of the request is\n                `{uri}/{path}`\n\n                **Note:** The `uri` stored in the `Client` instance and the value\n                provided as the `path` parameter of this method are used.\n            data:\n                Data passed in the POST request.\n\n        Raises:\n            CallError:\n                Error raised by `Client` when server's `Grid` response meta has an\n                `err` marker tag described\n                [here](https://project-haystack.org/doc/docHaystack/HttpApi#errorGrid).\n\n        Returns:\n            HTTP response.\n        \"\"\"\n        headers = {\n            \"Authorization\": f\"BEARER authToken={self._auth_token}\",\n            \"Accept\": self._content_type,\n        }\n\n        data = self._ph_encoder.encode(data)\n\n        response = self._ph_decoder.decode(\n            ph_request(\n                url=f\"{self.uri}/{path}\",\n                headers=headers,\n                content_type=self._content_type,\n                data=data,\n                method=\"POST\",\n                context=self._context,\n            ).body\n        )\n\n        _validate_response_meta(response)\n\n        return response\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.about","title":"about","text":"<pre><code>about()\n</code></pre> <p>Query basic information about the server.</p> <p>Returns:</p> Type Description <code>dict[str, typing.Any]</code> <p>A <code>dict</code> containing information about the server.</p> Source code in <code>phable/haystack_client.py</code> <pre><code>def about(self) -&gt; dict[str, Any]:\n    \"\"\"Query basic information about the server.\n\n    Returns:\n        A `dict` containing information about the server.\n    \"\"\"\n    return self.call(\"about\").rows[0]\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.call","title":"call","text":"<pre><code>call(path, data=phable.kinds.Grid(meta={'ver': '3.0'}, cols=[{'name': 'empty'}], rows=[]))\n</code></pre> <p>Sends a POST request to <code>{uri}/{path}</code> using provided <code>data</code>.</p> <p>This operation is not defined by Project Haystack. However, other <code>Client</code> methods use this method internally.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Location on endpoint such that the complete path of the request is <code>{uri}/{path}</code></p> <p>Note: The <code>uri</code> stored in the <code>Client</code> instance and the value provided as the <code>path</code> parameter of this method are used.</p> required <code>data</code> <code>phable.kinds.Grid</code> <p>Data passed in the POST request.</p> <code>phable.kinds.Grid(meta={'ver': '3.0'}, cols=[{'name': 'empty'}], rows=[])</code> <p>Raises:</p> Type Description <code>phable.haystack_client.CallError</code> <p>Error raised by <code>Client</code> when server's <code>Grid</code> response meta has an <code>err</code> marker tag described here.</p> <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p>HTTP response.</p> Source code in <code>phable/haystack_client.py</code> <pre><code>def call(\n    self,\n    path: str,\n    data: Grid = Grid(meta={\"ver\": \"3.0\"}, cols=[{\"name\": \"empty\"}], rows=[]),\n) -&gt; Grid:\n    \"\"\"Sends a POST request to `{uri}/{path}` using provided `data`.\n\n    This operation is not defined by Project Haystack. However, other `Client`\n    methods use this method internally.\n\n    Parameters:\n        path:\n            Location on endpoint such that the complete path of the request is\n            `{uri}/{path}`\n\n            **Note:** The `uri` stored in the `Client` instance and the value\n            provided as the `path` parameter of this method are used.\n        data:\n            Data passed in the POST request.\n\n    Raises:\n        CallError:\n            Error raised by `Client` when server's `Grid` response meta has an\n            `err` marker tag described\n            [here](https://project-haystack.org/doc/docHaystack/HttpApi#errorGrid).\n\n    Returns:\n        HTTP response.\n    \"\"\"\n    headers = {\n        \"Authorization\": f\"BEARER authToken={self._auth_token}\",\n        \"Accept\": self._content_type,\n    }\n\n    data = self._ph_encoder.encode(data)\n\n    response = self._ph_decoder.decode(\n        ph_request(\n            url=f\"{self.uri}/{path}\",\n            headers=headers,\n            content_type=self._content_type,\n            data=data,\n            method=\"POST\",\n            context=self._context,\n        ).body\n    )\n\n    _validate_response_meta(response)\n\n    return response\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the connection to the server.</p> <p>Note: Project Haystack recently defined the Close operation. Some servers may not support this operation.</p> <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p>An empty <code>Grid</code>.</p> Source code in <code>phable/haystack_client.py</code> <pre><code>def close(self) -&gt; Grid:\n    \"\"\"Close the connection to the server.\n\n    **Note:** Project Haystack recently defined the Close operation. Some servers\n    may not support this operation.\n\n    Returns:\n        An empty `Grid`.\n    \"\"\"\n\n    return self.call(\"close\")\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.his_read_by_id","title":"his_read_by_id","text":"<pre><code>his_read_by_id(id, range)\n</code></pre> <p>Read history data associated with <code>id</code> for the given <code>range</code>.</p> <p>When there is an existing <code>Grid</code> describing point records, it is worth considering to use the <code>Client.his_read()</code> method to store available metadata within the returned <code>Grid</code>.</p> <p>Example:</p> <pre><code>from datetime import date, timedelta\n\nfrom phable import DateRange, Ref, open_haystack_client\n\n# define these settings specific to your use case\nuri = \"http://localhost:8080/api/demo\"\nusername = \"&lt;username&gt;\"\npassword = \"&lt;password&gt;\"\n\n# update the id for your server\nid1 = Ref(\"2e749080-d2645928\")\n\nend = date.today()\nstart = end - timedelta(days=2)\nrange = DateRange(start, end)\n\nwith open_haystack_client(uri, username, password) as client:\n    his_grid = client.his_read_by_id(id1, range)\n\nhis_df_meta, his_df = his_grid.to_polars_all()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>phable.kinds.Ref</code> <p>Unique identifier for the point record associated with the requested history data.</p> required <code>range</code> <code>datetime.date | phable.kinds.DateRange | phable.kinds.DateTimeRange</code> <p>Ranges are inclusive of start timestamp and exclusive of end timestamp. If a date is provided without a defined end, then the server should infer the range to be from midnight of the defined date to midnight of the day after the defined date.</p> required <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p><code>Grid</code> with history data associated with the <code>id</code> for the given <code>range</code>.</p> Source code in <code>phable/haystack_client.py</code> <pre><code>def his_read_by_id(\n    self,\n    id: Ref,\n    range: date | DateRange | DateTimeRange,\n) -&gt; Grid:\n    \"\"\"Read history data associated with `id` for the given `range`.\n\n    When there is an existing `Grid` describing point records, it is worth\n    considering to use the `Client.his_read()` method to store available\n    metadata within the returned `Grid`.\n\n    **Example:**\n\n    ```python\n    from datetime import date, timedelta\n\n    from phable import DateRange, Ref, open_haystack_client\n\n    # define these settings specific to your use case\n    uri = \"http://localhost:8080/api/demo\"\n    username = \"&lt;username&gt;\"\n    password = \"&lt;password&gt;\"\n\n    # update the id for your server\n    id1 = Ref(\"2e749080-d2645928\")\n\n    end = date.today()\n    start = end - timedelta(days=2)\n    range = DateRange(start, end)\n\n    with open_haystack_client(uri, username, password) as client:\n        his_grid = client.his_read_by_id(id1, range)\n\n    his_df_meta, his_df = his_grid.to_polars_all()\n    ```\n\n    Parameters:\n        id:\n            Unique identifier for the point record associated with the requested\n            history data.\n        range:\n            Ranges are inclusive of start timestamp and exclusive of end timestamp.\n            If a date is provided without a defined end, then the server should\n            infer the range to be from midnight of the defined date to midnight of\n            the day after the defined date.\n\n    Returns:\n        `Grid` with history data associated with the `id` for the given `range`.\n    \"\"\"\n    data = _create_his_read_req_data(id, range)\n    response = self.call(\"hisRead\", data)\n\n    return response\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.his_read_by_ids","title":"his_read_by_ids","text":"<pre><code>his_read_by_ids(ids, range)\n</code></pre> <p>Read history data associated with <code>ids</code> for the given <code>range</code>.</p> <p>When there is an existing <code>Grid</code> describing point records, it is worth considering to use the <code>Client.his_read()</code> method to store available metadata within the returned <code>Grid</code>.</p> <p>Note: Project Haystack recently defined batch history read support.  Some Project Haystack servers may not support reading history data for more than one point record at a time.</p> <p>Example:</p> <pre><code>from datetime import date, timedelta\n\nfrom phable import DateRange, Ref, open_haystack_client\n\n# define these settings specific to your use case\nuri = \"http://localhost:8080/api/demo\"\nusername = \"&lt;username&gt;\"\npassword = \"&lt;password&gt;\"\n\n# update the ids for your server\nid1 = Ref(\"2e749080-d2645928\")\nid2 = Ref(\"2e749080-4719193b\")\n\nend = date.today()\nstart = end - timedelta(days=2)\nrange = DateRange(start, end)\n\nwith open_haystack_client(uri, username, password) as client:\n    his_grid = client.his_read_by_ids([id1, id2], range)\n\nhis_df_meta, his_df = his_grid.to_polars_all()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list[phable.kinds.Ref]</code> <p>Unique identifiers for the point records associated with the requested history data.</p> required <code>range</code> <code>datetime.date | phable.kinds.DateRange | phable.kinds.DateTimeRange</code> <p>Ranges are inclusive of start timestamp and exclusive of end timestamp. If a date is provided without a defined end, then the server should infer the range to be from midnight of the defined date to midnight of the day after the defined date.</p> required <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p><code>Grid</code> with history data associated with the <code>ids</code> for the given <code>range</code>.</p> Source code in <code>phable/haystack_client.py</code> <pre><code>def his_read_by_ids(\n    self,\n    ids: list[Ref],\n    range: date | DateRange | DateTimeRange,\n) -&gt; Grid:\n    \"\"\"Read history data associated with `ids` for the given `range`.\n\n    When there is an existing `Grid` describing point records, it is worth\n    considering to use the `Client.his_read()` method to store available\n    metadata within the returned `Grid`.\n\n    **Note:** Project Haystack recently defined batch history read support.  Some\n    Project Haystack servers may not support reading history data for more than one\n    point record at a time.\n\n    **Example:**\n\n    ```python\n    from datetime import date, timedelta\n\n    from phable import DateRange, Ref, open_haystack_client\n\n    # define these settings specific to your use case\n    uri = \"http://localhost:8080/api/demo\"\n    username = \"&lt;username&gt;\"\n    password = \"&lt;password&gt;\"\n\n    # update the ids for your server\n    id1 = Ref(\"2e749080-d2645928\")\n    id2 = Ref(\"2e749080-4719193b\")\n\n    end = date.today()\n    start = end - timedelta(days=2)\n    range = DateRange(start, end)\n\n    with open_haystack_client(uri, username, password) as client:\n        his_grid = client.his_read_by_ids([id1, id2], range)\n\n    his_df_meta, his_df = his_grid.to_polars_all()\n    ```\n\n    Parameters:\n        ids:\n            Unique identifiers for the point records associated with the requested\n            history data.\n        range:\n            Ranges are inclusive of start timestamp and exclusive of end timestamp.\n            If a date is provided without a defined end, then the server should\n            infer the range to be from midnight of the defined date to midnight of\n            the day after the defined date.\n\n    Returns:\n        `Grid` with history data associated with the `ids` for the given `range`.\n    \"\"\"\n    data = _create_his_read_req_data(ids, range)\n    response = self.call(\"hisRead\", data)\n\n    return response\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.his_write_by_id","title":"his_write_by_id","text":"<pre><code>his_write_by_id(id, his_rows)\n</code></pre> <p>Write history data to point records on the server.</p> <p>History row key values must be valid data types defined for <code>Phable</code>.</p> <p>History row key names must be <code>ts</code> or <code>val</code>.  Values in the column named <code>val</code> are for the <code>Ref</code> described by the <code>id</code> parameter.</p> <p>Additional requirements</p> <ol> <li>Timestamp and value kind of <code>his_row</code> data must match the entity's (Ref) configured timezone and kind</li> <li>Numeric data must match the entity's (Ref) configured unit or status of being unitless</li> </ol> <p>Recommendations for enhanced performance</p> <ol> <li>Avoid posting out-of-order or duplicate data</li> </ol> <p>Example:</p> <pre><code>from datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\n\nfrom phable import Number, Ref, open_haystack_client\n\n# define these settings specific to your use case\nuri = \"http://localhost:8080/api/demo\"\nusername = \"&lt;username&gt;\"\npassword = \"&lt;password&gt;\"\n\n# make sure datetime objects are timezone aware\nts_now = datetime.now(ZoneInfo(\"America/New_York\"))\n\nhis_rows = [\n    {\n        \"ts\": ts_now - timedelta(seconds=30),\n        \"val\": Number(1_000.0, \"kW\"),\n    },\n    {\n        \"ts\": ts_now,\n        \"val\": Number(2_000.0, \"kW\"),\n    },\n]\n\n# update the id for your server\nid1 = Ref(\"2e749080-3cad46c0\")\n\nwith open_haystack_client(uri, username, password) as client:\n    client.his_write_by_id(id1, data_rows)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>phable.kinds.Ref</code> <p>Unique identifier for the point record.</p> required <code>his_rows</code> <code>list[dict[str, typing.Any]]</code> <p>History data to be written for the <code>id</code>.</p> required <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p>An empty <code>Grid</code>.</p> Source code in <code>phable/haystack_client.py</code> <pre><code>def his_write_by_id(\n    self,\n    id: Ref,\n    his_rows: list[dict[str, Any]],\n) -&gt; Grid:\n    \"\"\"Write history data to point records on the server.\n\n    History row key values must be valid data types defined for `Phable`.\n\n    History row key names must be `ts` or `val`.  Values in the column named `val`\n    are for the `Ref` described by the `id` parameter.\n\n    **Additional requirements**\n\n    1. Timestamp and value kind of `his_row` data must match the entity's (Ref)\n    configured timezone and kind\n    2. Numeric data must match the entity's (Ref) configured unit or status of\n    being unitless\n\n    **Recommendations for enhanced performance**\n\n    1. Avoid posting out-of-order or duplicate data\n\n    **Example:**\n\n    ```python\n    from datetime import datetime, timedelta\n    from zoneinfo import ZoneInfo\n\n    from phable import Number, Ref, open_haystack_client\n\n    # define these settings specific to your use case\n    uri = \"http://localhost:8080/api/demo\"\n    username = \"&lt;username&gt;\"\n    password = \"&lt;password&gt;\"\n\n    # make sure datetime objects are timezone aware\n    ts_now = datetime.now(ZoneInfo(\"America/New_York\"))\n\n    his_rows = [\n        {\n            \"ts\": ts_now - timedelta(seconds=30),\n            \"val\": Number(1_000.0, \"kW\"),\n        },\n        {\n            \"ts\": ts_now,\n            \"val\": Number(2_000.0, \"kW\"),\n        },\n    ]\n\n    # update the id for your server\n    id1 = Ref(\"2e749080-3cad46c0\")\n\n    with open_haystack_client(uri, username, password) as client:\n        client.his_write_by_id(id1, data_rows)\n    ```\n\n    Parameters:\n        id: Unique identifier for the point record.\n        his_rows: History data to be written for the `id`.\n\n    Returns:\n        An empty `Grid`.\n    \"\"\"\n    meta = {\"id\": id}\n    his_grid = Grid.to_grid(his_rows, meta)\n    return self.call(\"hisWrite\", his_grid)\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.his_write_by_ids","title":"his_write_by_ids","text":"<pre><code>his_write_by_ids(ids, his_rows)\n</code></pre> <p>Write history data to point records on the server.</p> <p>History row key values must be valid data types defined for <code>Phable</code>.</p> <p>History row key names must be <code>ts</code> or <code>vX</code> where <code>X</code> is an integer equal to or greater than zero.  Also, <code>X</code> must not exceed the highest index of <code>ids</code>.</p> <p>The index of an id in <code>ids</code> corresponds to the column name used in <code>his_rows</code>.</p> <p>Additional requirements</p> <ol> <li>Timestamp and value kind of <code>his_row</code> data must match the entity's (Ref) configured timezone and kind</li> <li>Numeric data must match the entity's (Ref) configured unit or status of being unitless</li> </ol> <p>Recommendations for enhanced performance</p> <ol> <li>Avoid posting out-of-order or duplicate data</li> </ol> <p>Batch history write support</p> <p>Project Haystack recently defined batch history write support.  Some Project Haystack servers may not support writing history data to more than one point at a time.  For these instances it is recommended to use a <code>Ref</code> type for the <code>ids</code> parameter.</p> <p>Example:</p> <pre><code>from datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\n\nfrom phable import Number, Ref, open_haystack_client\n\n# define these settings specific to your use case\nuri = \"http://localhost:8080/api/demo\"\nusername = \"&lt;username&gt;\"\npassword = \"&lt;password&gt;\"\n\n# make sure datetime objects are timezone aware\nts_now = datetime.now(ZoneInfo(\"America/New_York\"))\n\nhis_rows = [\n    {\"ts\": ts_now - timedelta(seconds=30), \"v0\": Number(1, \"kW\")},\n    {\"ts\": ts_now, \"v0\": Number(50, \"kW\"), \"v1\": Number(20, \"kW\")},\n]\n\n# update the ids for your server\nid1 = Ref(\"2e749080-3cad46c0\")\nid2 = Ref(\"2e749080-520f621b\")\n\nwith open_haystack_client(uri, username, password) as client:\n    client.his_write_by_ids([id1, id2], his_rows)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list[phable.kinds.Ref]</code> <p>Unique identifiers for the point records.</p> required <code>his_rows</code> <code>list[dict[str, typing.Any]]</code> <p>History data to be written for the <code>ids</code>.</p> required <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p>An empty <code>Grid</code>.</p> Source code in <code>phable/haystack_client.py</code> <pre><code>def his_write_by_ids(\n    self,\n    ids: list[Ref],\n    his_rows: list[dict[str, Any]],\n) -&gt; Grid:\n    \"\"\"Write history data to point records on the server.\n\n    History row key values must be valid data types defined for `Phable`.\n\n    History row key names must be `ts` or `vX` where `X` is an integer equal\n    to or greater than zero.  Also, `X` must not exceed the highest index of `ids`.\n\n    The index of an id in `ids` corresponds to the column name used in `his_rows`.\n\n    **Additional requirements**\n\n    1. Timestamp and value kind of `his_row` data must match the entity's (Ref)\n    configured timezone and kind\n    2. Numeric data must match the entity's (Ref) configured unit or status of\n    being unitless\n\n    **Recommendations for enhanced performance**\n\n    1. Avoid posting out-of-order or duplicate data\n\n    **Batch history write support**\n\n    Project Haystack recently defined batch history write support.  Some Project\n    Haystack servers may not support writing history data to more than one point\n    at a time.  For these instances it is recommended to use a `Ref` type for the\n    `ids` parameter.\n\n    **Example:**\n\n    ```python\n    from datetime import datetime, timedelta\n    from zoneinfo import ZoneInfo\n\n    from phable import Number, Ref, open_haystack_client\n\n    # define these settings specific to your use case\n    uri = \"http://localhost:8080/api/demo\"\n    username = \"&lt;username&gt;\"\n    password = \"&lt;password&gt;\"\n\n    # make sure datetime objects are timezone aware\n    ts_now = datetime.now(ZoneInfo(\"America/New_York\"))\n\n    his_rows = [\n        {\"ts\": ts_now - timedelta(seconds=30), \"v0\": Number(1, \"kW\")},\n        {\"ts\": ts_now, \"v0\": Number(50, \"kW\"), \"v1\": Number(20, \"kW\")},\n    ]\n\n    # update the ids for your server\n    id1 = Ref(\"2e749080-3cad46c0\")\n    id2 = Ref(\"2e749080-520f621b\")\n\n    with open_haystack_client(uri, username, password) as client:\n        client.his_write_by_ids([id1, id2], his_rows)\n    ```\n\n    Parameters:\n        ids: Unique identifiers for the point records.\n        his_rows: History data to be written for the `ids`.\n\n    Returns:\n        An empty `Grid`.\n    \"\"\"\n    meta = {\"ver\": \"3.0\"}\n    cols = [{\"name\": \"ts\"}]\n\n    for count, id in enumerate(ids):\n        cols.append({\"name\": f\"v{count}\", \"meta\": {\"id\": id}})\n\n    his_grid = Grid(meta, cols, his_rows)\n\n    return self.call(\"hisWrite\", his_grid)\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.open","title":"open  <code>classmethod</code>","text":"<pre><code>open(uri, username, password, *, content_type='json', ssl_context=None)\n</code></pre> <p>Opens a session with the server for the URI of the project.</p> <p>Raises:</p> Type Description <code>phable.auth.scram.AuthError</code> <p>Unable to authenticate with the server using the credentials provided.</p> <code>urllib.error.URLError</code> <p>URL is not known or lacks the required http prefix.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>URI of endpoint such as \"http://host/api/myProj/\".</p> required <code>username</code> <code>str</code> <p>Username for the API user.</p> required <code>password</code> <code>str</code> <p>Password for the API user.</p> required <code>content_type</code> <code>str</code> <p>Format of data exchanged via HTTP. \"json\" and \"zinc\" options are supported.</p> <code>'json'</code> <code>ssl_context</code> <code>ssl.SSLContext | None</code> <p>Optional SSL context. If not provided, a SSL context with default settings is created and used.</p> <code>None</code> <p>Returns:</p> Type Description <code>typing.Self</code> <p>An instance of the class this method is used on (i.e., Client or HxClient).</p> Source code in <code>phable/haystack_client.py</code> <pre><code>@classmethod\ndef open(\n    cls,\n    uri: str,\n    username: str,\n    password: str,\n    *,\n    content_type: str = \"json\",\n    ssl_context: SSLContext | None = None,\n) -&gt; Self:\n    \"\"\"Opens a session with the server for the URI of the project.\n\n    Raises:\n        AuthError:\n            Unable to authenticate with the server using the credentials provided.\n        urllib.error.URLError:\n            URL is not known or lacks the required http prefix.\n\n    Parameters:\n        uri: URI of endpoint such as \"http://host/api/myProj/\".\n        username: Username for the API user.\n        password: Password for the API user.\n        content_type:\n            Format of data exchanged via HTTP. \"json\" and \"zinc\" options are supported.\n        ssl_context:\n            Optional SSL context. If not provided, a SSL context with default\n            settings is created and used.\n\n    Returns:\n        An instance of the class this method is used on (i.e., Client or HxClient).\n    \"\"\"\n\n    scram = ScramScheme(uri, username, password, content_type, ssl_context)\n    auth_token = scram.get_auth_token()\n\n    return cls(uri, auth_token, content_type=content_type, ssl_context=ssl_context)\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.point_write","title":"point_write","text":"<pre><code>point_write(id, level, val=None, who=None, duration=None)\n</code></pre> <p>Writes to a given level of a writable point's priority array.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>phable.kinds.Ref</code> <p>Unique identifier of the writable point.</p> required <code>level</code> <code>int</code> <p>Integer from 1 - 17 (17 is default).</p> required <code>val</code> <code>phable.kinds.Number | bool | str | None</code> <p>Current value at level or null.</p> <code>None</code> <code>who</code> <code>str | None</code> <p>Optional username/application name performing the write. If not provided, the authenticated user display name is used.</p> <code>None</code> <code>duration</code> <code>phable.kinds.Number | None</code> <p>Optional number with duration unit if setting level 8.</p> <code>None</code> <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p><code>Grid</code> with the server's response.</p> Source code in <code>phable/haystack_client.py</code> <pre><code>def point_write(\n    self,\n    id: Ref,\n    level: int,\n    val: Number | bool | str | None = None,\n    who: str | None = None,\n    duration: Number | None = None,\n) -&gt; Grid:\n    \"\"\"Writes to a given level of a writable point's priority array.\n\n    Parameters:\n        id: Unique identifier of the writable point.\n        level: Integer from 1 - 17 (17 is default).\n        val: Current value at level or null.\n        who:\n            Optional username/application name performing the write. If not\n            provided, the authenticated user display name is used.\n        duration: Optional number with duration unit if setting level 8.\n\n    Returns:\n        `Grid` with the server's response.\n    \"\"\"\n    row = {\"id\": id, \"level\": Number(level)}\n\n    if val is not None:\n        row[\"val\"] = val\n    if who is not None:\n        row[\"who\"] = who\n    if duration is not None:\n        row[\"duration\"] = duration\n\n    return self.call(\"pointWrite\", Grid.to_grid(row))\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.point_write_array","title":"point_write_array","text":"<pre><code>point_write_array(id)\n</code></pre> <p>Reads the current status of a writable point's priority array.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>phable.kinds.Ref</code> <p>Unique identifier for the record.</p> required <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p><code>Grid</code> with the server's response.</p> Source code in <code>phable/haystack_client.py</code> <pre><code>def point_write_array(self, id: Ref) -&gt; Grid:\n    \"\"\"Reads the current status of a writable point's priority array.\n\n    Parameters:\n        id: Unique identifier for the record.\n\n    Returns:\n        `Grid` with the server's response.\n    \"\"\"\n    return self.call(\"pointWrite\", Grid.to_grid({\"id\": id}))\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.read","title":"read","text":"<pre><code>read(filter, checked=True)\n</code></pre> <p>Read from the database the first record which matches the filter.</p> <p>Raises:</p> Type Description <code>phable.haystack_client.UnknownRecError</code> <p>Server's response does not include requested rec.</p> <p>Parameters:</p> Name Type Description Default <code>filter</code> <code>str</code> <p>Project Haystack defined filter for querying the server.</p> required <code>checked</code> <code>bool</code> <p>If <code>checked</code> is equal to false and the record cannot be found, an empty <code>dict</code> is returned. If <code>checked</code> is equal to true and the record cannot be found, an <code>UnknownRecError</code> is raised.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[typing.Any, typing.Any]</code> <p>An empty <code>dict</code> or a <code>dict</code> that describes the entity read.</p> Source code in <code>phable/haystack_client.py</code> <pre><code>def read(self, filter: str, checked: bool = True) -&gt; dict[Any, Any]:\n    \"\"\"Read from the database the first record which matches the\n    [filter](https://project-haystack.org/doc/docHaystack/Filters).\n\n    Raises:\n        UnknownRecError: Server's response does not include requested rec.\n\n    Parameters:\n        filter:\n            Project Haystack defined\n            [filter](https://project-haystack.org/doc/docHaystack/Filters) for\n            querying the server.\n        checked:\n            If `checked` is equal to false and the record cannot be found, an empty\n            `dict` is returned. If `checked` is equal to true and the record cannot\n            be found, an `UnknownRecError` is raised.\n\n    Returns:\n        An empty `dict` or a `dict` that describes the entity read.\n    \"\"\"\n    response = self.read_all(filter, Number(1))\n\n    if len(response.rows) == 0:\n        if checked is True:\n            raise UnknownRecError(\n                \"Unable to locate an entity on the server that matches the filter.\"\n            )\n        else:\n            response = {}\n    else:\n        response = response.rows[0]\n\n    return response\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.read_all","title":"read_all","text":"<pre><code>read_all(filter, limit=None)\n</code></pre> <p>Read all records from the database which match the filter.</p> <p>Parameters:</p> Name Type Description Default <code>filter</code> <code>str</code> <p>Project Haystack defined filter for querying the server.</p> required <code>limit</code> <code>int | None</code> <p>Maximum number of entities to return in response.</p> <code>None</code> <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p>An empty <code>Grid</code> or a <code>Grid</code> that has a row for each entity read.</p> Source code in <code>phable/haystack_client.py</code> <pre><code>def read_all(self, filter: str, limit: int | None = None) -&gt; Grid:\n    \"\"\"Read all records from the database which match the\n    [filter](https://project-haystack.org/doc/docHaystack/Filters).\n\n    Parameters:\n        filter:\n            Project Haystack defined\n            [filter](https://project-haystack.org/doc/docHaystack/Filters) for\n            querying the server.\n        limit: Maximum number of entities to return in response.\n\n    Returns:\n        An empty `Grid` or a `Grid` that has a row for each entity read.\n    \"\"\"\n    data_row = {\"filter\": filter}\n\n    if limit is not None:\n        data_row[\"limit\"] = limit\n\n    response = self.call(\"read\", Grid.to_grid(data_row))\n\n    return response\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.read_by_id","title":"read_by_id","text":"<pre><code>read_by_id(id, checked=True)\n</code></pre> <p>Read an entity record using its unique identifier.</p> <p>Raises:</p> Type Description <code>phable.haystack_client.UnknownRecError</code> <p>Server's response does not include requested rec.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>phable.kinds.Ref</code> <p>Unique identifier for the record being read.</p> required <code>checked</code> <code>bool</code> <p>If <code>checked</code> is equal to false and the record cannot be found, an empty <code>dict</code> is returned. If <code>checked</code> is equal to true and the record cannot be found, an <code>UnknownRecError</code> is raised.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[typing.Any, typing.Any]</code> <p>An empty <code>dict</code> or a <code>dict</code> that describes the entity read.</p> Source code in <code>phable/haystack_client.py</code> <pre><code>def read_by_id(self, id: Ref, checked: bool = True) -&gt; dict[Any, Any]:\n    \"\"\"Read an entity record using its unique identifier.\n\n    Raises:\n        UnknownRecError: Server's response does not include requested rec.\n\n    Parameters:\n        id: Unique identifier for the record being read.\n        checked:\n            If `checked` is equal to false and the record cannot be found, an empty\n            `dict` is returned. If `checked` is equal to true and the record cannot\n            be found, an `UnknownRecError` is raised.\n\n    Returns:\n        An empty `dict` or a `dict` that describes the entity read.\n    \"\"\"\n\n    data_rows = [{\"id\": id}]\n    post_data = Grid.to_grid(data_rows)\n    response = self.call(\"read\", post_data)\n\n    if len(response.rows) == 0:\n        if checked is True:\n            raise UnknownRecError(\"Unable to locate the id on the server.\")\n        else:\n            response = {}\n    else:\n        response = response.rows[0]\n\n    return response\n</code></pre>"},{"location":"haystack_client/#phable.HaystackClient.read_by_ids","title":"read_by_ids","text":"<pre><code>read_by_ids(ids)\n</code></pre> <p>Read a set of entity records using their unique identifiers.</p> <p>Note: Project Haystack recently introduced batch read support, which might not be supported by some servers. If your server does not support the batch read feature, then try using the <code>Client.read_by_id()</code> method instead.</p> <p>Raises:</p> Type Description <code>phable.haystack_client.UnknownRecError</code> <p>Server's response does not include requested recs.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list[phable.kinds.Ref]</code> <p>Unique identifiers for the records being read.</p> required <p>Returns:</p> Type Description <code>phable.kinds.Grid</code> <p><code>Grid</code> with a row for each entity read.</p> Source code in <code>phable/haystack_client.py</code> <pre><code>def read_by_ids(self, ids: list[Ref]) -&gt; Grid:\n    \"\"\"Read a set of entity records using their unique identifiers.\n\n    **Note:** Project Haystack recently introduced batch read support, which might\n    not be supported by some servers. If your server does not support the batch\n    read feature, then try using the `Client.read_by_id()` method instead.\n\n    Raises:\n        UnknownRecError: Server's response does not include requested recs.\n\n    Parameters:\n        ids: Unique identifiers for the records being read.\n\n    Returns:\n        `Grid` with a row for each entity read.\n    \"\"\"\n    ids = ids.copy()\n    data_rows = [{\"id\": id} for id in ids]\n    post_data = Grid.to_grid(data_rows)\n    response = self.call(\"read\", post_data)\n\n    if len(response.rows) != len(ids):\n        raise UnknownRecError(\"Unable to locate one or more ids on the server.\")\n    for row in response.rows:\n        if len(row) == 0:\n            raise UnknownRecError(\"Unable to locate one or more ids on the server.\")\n\n    return response\n</code></pre>"},{"location":"haystack_client/#phable.AuthError","title":"AuthError  <code>dataclass</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Error raised when the client is unable to authenticate with the server using the credentials provided.</p> <p><code>AuthError</code> can be directly imported as follows:</p> <pre><code>from phable import AuthError\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>help_msg</code> <code>str</code> <p>A display to help with troubleshooting.</p> required Source code in <code>phable/auth/scram.py</code> <pre><code>@dataclass\nclass AuthError(Exception):\n    \"\"\"Error raised when the client is unable to authenticate with the server using the\n    credentials provided.\n\n    `AuthError` can be directly imported as follows:\n\n    ```python\n    from phable import AuthError\n    ```\n\n    Parameters:\n        help_msg: A display to help with troubleshooting.\n    \"\"\"\n\n    help_msg: str\n</code></pre>"},{"location":"haystack_client/#phable.CallError","title":"CallError  <code>dataclass</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Error raised by <code>HaystackClient</code> when server's <code>Grid</code> response meta has an <code>err</code> marker tag.</p> <p><code>CallError</code> can be directly imported as follows:</p> <pre><code>from phable import CallError\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>help_msg</code> <code>phable.kinds.Grid</code> <p><code>Grid</code> that has <code>err</code> marker tag in meta described here.</p> required Source code in <code>phable/haystack_client.py</code> <pre><code>@dataclass\nclass CallError(Exception):\n    \"\"\"Error raised by `HaystackClient` when server's `Grid` response meta has an `err`\n    marker tag.\n\n    `CallError` can be directly imported as follows:\n\n    ```python\n    from phable import CallError\n    ```\n\n    Parameters:\n        help_msg:\n            `Grid` that has `err` marker tag in meta described\n            [here](https://project-haystack.org/doc/docHaystack/HttpApi#errorGrid).\n    \"\"\"\n\n    help_msg: Grid\n</code></pre>"},{"location":"haystack_client/#phable.UnknownRecError","title":"UnknownRecError  <code>dataclass</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Error raised by <code>HaystackClient</code> when server's <code>Grid</code> response does not include data for one or more recs being requested.</p> <p><code>UnknownRecError</code> can be directly imported as follows:</p> <pre><code>from phable import UnknownRecError\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>help_msg</code> <code>str</code> <p>A display to help with troubleshooting.</p> required Source code in <code>phable/haystack_client.py</code> <pre><code>@dataclass\nclass UnknownRecError(Exception):\n    \"\"\"Error raised by `HaystackClient` when server's `Grid` response does not include\n    data for one or more recs being requested.\n\n    `UnknownRecError` can be directly imported as follows:\n\n    ```python\n    from phable import UnknownRecError\n    ```\n\n    Parameters:\n        help_msg: A display to help with troubleshooting.\n    \"\"\"\n\n    help_msg: str\n</code></pre>"},{"location":"more_examples/","title":"More examples","text":""},{"location":"more_examples/#saving-logs-generated-by-phables-logger-to-a-file","title":"Saving logs generated by Phable's logger to a file","text":"<p>Running the below Python code and observing the generated log file may help with troubleshooting HTTP related issues.  Also, the log configuration shown can be modified to address other use cases.</p> <p>Note: In this example the logs are written to a file called <code>app.log</code> in the same directory as the executed Python script.</p> <pre><code>import logging\n\nfrom phable import open_haystack_client\n\nlogging.basicConfig(\n    filename=\"app.log\",\n    encoding=\"utf-8\",\n    filemode=\"a\",\n    format=\"{asctime} - {name} - {levelname} - {message}\",\n    level=logging.DEBUG,\n    style=\"{\",\n    datefmt=\"%Y-%m-%d %H:%M:%S\",\n)\n\n# define these settings specific to your use case\nuri = \"http://localhost:8080/api/demo\"\nusername = \"&lt;username&gt;\"\npassword = \"&lt;password&gt;\"\n\nwith open_haystack_client(uri, username, password) as client:\n    client.about()\n</code></pre>"},{"location":"more_examples/#async-usage-without-context-manager","title":"Async Usage without Context Manager","text":"<pre><code>import asyncio\n\nfrom phable import HaystackClient\n\n\nasync def main() -&gt; None:\n    # define these settings specific to your use case\n    uri = \"http://localhost:8080/api/demo\"\n    username = \"&lt;username&gt;\"\n    password = \"&lt;password&gt;\"\n\n    client = HaystackClient.open(uri=uri, username=username, password=password)\n\n    power_pt_grid = asyncio.to_thread(client.read, \"power and point\")\n    energy_pt_grid = asyncio.to_thread(client.read, \"energy and point\")\n    power_pt_grid, energy_pt_grid = await asyncio.gather(power_pt_grid, energy_pt_grid)\n\n    # remember to close the session with the server\n    client.close()\n\n    power_pt_df_meta, power_pt_df = power_pt_grid.to_polars_all()\n    energy_pt_df_meta, energy_pt_df = energy_pt_grid.to_polars_all()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"}]}